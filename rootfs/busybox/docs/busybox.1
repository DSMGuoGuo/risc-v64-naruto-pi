.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BUSYBOX 1"
.TH BUSYBOX 1 "2024-06-12" "version 1.36.1" "busybox"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BusyBox \- The Swiss Army Knife of Embedded Linux
.SH "SYNTAX"
.IX Header "SYNTAX"
.Vb 1
\& busybox <applet> [arguments...]  # or
\&
\& <applet> [arguments...]          # if symlinked
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
BusyBox combines tiny versions of many common \s-1UNIX\s0 utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in \s-1GNU\s0 coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured \s-1GNU\s0 cousins; however, the
options that are included provide the expected functionality and behave very
much like their \s-1GNU\s0 counterparts.
.PP
BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete \s-1POSIX\s0 environment for any small or embedded
system.
.PP
BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
\&'make' to compile BusyBox using your configuration.
.PP
After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by \s-1CONFIG_PREFIX. CONFIG_PREFIX\s0 can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by \s-1CONFIG_PREFIX.\s0
.SH "USAGE"
.IX Header "USAGE"
BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.
.PP
You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering
.PP
.Vb 1
\&        /bin/busybox ls
.Ve
.PP
will also cause BusyBox to behave as 'ls'.
.PP
Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.
.PP
For example, entering
.PP
.Vb 2
\&        ln \-s /bin/busybox ls
\&        ./ls
.Ve
.PP
will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.
.PP
If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.
.SH "COMMON OPTIONS"
.IX Header "COMMON OPTIONS"
Most BusyBox applets support the \fB\-\-help\fR argument to provide a terse runtime
description of their behavior.  If the \s-1CONFIG_FEATURE_VERBOSE_USAGE\s0 option has
been enabled, more detailed usage information will also be available.
.SH "COMMANDS"
.IX Header "COMMANDS"
Currently available applets include:
.PP
.Vb 10
\&        [, [[, add\-shell, addgroup, adduser, arch, ascii, ash, awk, base32,
\&        base64, basename, bc, blkdiscard, bootchartd, bunzip2, bzcat, bzip2,
\&        cal, cat, chat, chattr, chgrp, chmod, chown, chpasswd, chpst,
\&        chroot, chrt, cksum, clear, cmp, comm, cp, cpio, crc32, crond,
\&        crontab, cryptpw, cut, date, dc, dd, delgroup, deluser, devmem, df,
\&        diff, dirname, dmesg, dnsd, dnsdomainname, dos2unix, du, echo, ed,
\&        egrep, env, envdir, envuidgid, expand, expr, factor, fakeidentd,
\&        fallocate, false, fatattr, fgrep, find, flock, fold, fsck.minix,
\&        fsfreeze, fstrim, fsync, ftpd, ftpget, ftpput, fuser, getopt, getty,
\&        grep, groups, gunzip, gzip, halt, hd, head, hexdump, hexedit,
\&        hostid, hostname, httpd, hush, i2cdetect, i2cdump, i2cget, i2cset,
\&        i2ctransfer, id, ifdown, ifup, inetd, init, install, iostat, ipcalc,
\&        ipcrm, ipneigh, kill, killall, killall5, less, link, linux32,
\&        linux64, linuxrc, ln, logger, login, logname, logread, lpd, lpq,
\&        lpr, ls, lsof, lsscsi, lzcat, lzma, lzop, makemime, man, md5sum,
\&        mdev, mesg, mim, mkdir, mkdosfs, mke2fs, mkfifo, mknod, mkpasswd,
\&        mkswap, mktemp, more, mount, mpstat, mt, mv, nc, nice, nl, nmeter,
\&        nohup, nologin, nproc, nsenter, od, partprobe, passwd, paste, patch,
\&        pgrep, pidof, pipe_progress, pivot_root, pkill, popmaildir,
\&        poweroff, printenv, printf, ps, pscan, pstree, pwd, pwdx, rdate,
\&        rdev, readlink, readprofile, realpath, reboot, reformime,
\&        remove\-shell, renice, reset, resize, resume, rev, rm, rmdir, rpm,
\&        rpm2cpio, run\-init, run\-parts, runsv, runsvdir, script,
\&        scriptreplay, sed, seedrng, sendmail, seq, setfattr, setpriv,
\&        setsid, setuidgid, sh, sha1sum, sha256sum, sha3sum, sha512sum,
\&        shred, shuf, sleep, smemcap, softlimit, sort, split, ssl_client,
\&        start\-stop\-daemon, strings, stty, su, sulogin, sum, sv, svc, svlogd,
\&        svok, swapoff, swapon, sync, sysctl, syslogd, tac, tail, tar, tc,
\&        tcpsvd, tee, telnet, telnetd, test, tftp, tftpd, time, timeout, top,
\&        touch, tr, tree, true, truncate, ts, tsort, tty, ttysize, ubirename,
\&        udhcpc6, udpsvd, uevent, uname, unexpand, uniq, unix2dos, unlink,
\&        unlzma, unshare, unxz, unzip, usleep, uudecode, uuencode, vi, vlock,
\&        volname, watch, wc, wget, which, whoami, whois, xargs, xxd, xz,
\&        xzcat, yes, zcat
.Ve
.SH "COMMAND DESCRIPTIONS"
.IX Header "COMMAND DESCRIPTIONS"
.IP "\fBadd-shell\fR" 4
.IX Item "add-shell"
add-shell \s-1SHELL...\s0
.Sp
Add SHELLs to /etc/shells
.IP "\fBaddgroup\fR" 4
.IX Item "addgroup"
addgroup [\-g \s-1GID\s0] [\-S] [\s-1USER\s0] \s-1GROUP\s0
.Sp
Add a group or add a user to a group
.Sp
.Vb 2
\&        \-g GID  Group id
\&        \-S      Create a system group
.Ve
.IP "\fBadduser\fR" 4
.IX Item "adduser"
adduser [\s-1OPTIONS\s0] \s-1USER\s0 [\s-1GROUP\s0]
.Sp
Create new user, or add \s-1USER\s0 to \s-1GROUP\s0
.Sp
.Vb 9
\&        \-h DIR          Home directory
\&        \-g GECOS        GECOS field
\&        \-s SHELL        Login shell
\&        \-G GRP          Group
\&        \-S              Create a system user
\&        \-D              Don\*(Aqt assign a password
\&        \-H              Don\*(Aqt create home directory
\&        \-u UID          User id
\&        \-k SKEL         Skeleton directory (/etc/skel)
.Ve
.IP "\fBarch\fR" 4
.IX Item "arch"
arch
.Sp
Print system architecture
.IP "\fBash\fR" 4
.IX Item "ash"
ash [\-il] [\-|+Cabefmnuvx] [\-|+o \s-1OPT\s0]... [\-c '\s-1SCRIPT\s0' [\s-1ARG0 ARGS\s0] | \s-1FILE ARGS\s0 | \-s \s-1ARGS\s0]
.Sp
Unix shell interpreter
.IP "\fBawk\fR" 4
.IX Item "awk"
awk [\s-1OPTIONS\s0] [\s-1AWK_PROGRAM\s0] [\s-1FILE\s0]...
.Sp
.Vb 4
\&        \-v VAR=VAL      Set variable
\&        \-F SEP          Use SEP as field separator
\&        \-f FILE         Read program from FILE
\&        \-e AWK_PROGRAM
.Ve
.IP "\fBbase32\fR" 4
.IX Item "base32"
base32 [\-d] [\-w \s-1COL\s0] [\s-1FILE\s0]
.Sp
Base32 encode or decode \s-1FILE\s0 to standard output
.Sp
.Vb 2
\&        \-d      Decode data
\&        \-w COL  Wrap lines at COL (default 76, 0 disables)
.Ve
.IP "\fBbase64\fR" 4
.IX Item "base64"
base64 [\-d] [\-w \s-1COL\s0] [\s-1FILE\s0]
.Sp
Base64 encode or decode \s-1FILE\s0 to standard output
.Sp
.Vb 2
\&        \-d      Decode data
\&        \-w COL  Wrap lines at COL (default 76, 0 disables)
.Ve
.IP "\fBbasename\fR" 4
.IX Item "basename"
basename \s-1FILE\s0 [\s-1SUFFIX\s0] | \-a \s-1FILE...\s0 | \-s \s-1SUFFIX FILE...\s0
.Sp
Strip directory path and \s-1SUFFIX\s0 from \s-1FILE\s0
.Sp
.Vb 2
\&        \-a              All arguments are FILEs
\&        \-s SUFFIX       Remove SUFFIX (implies \-a)
.Ve
.IP "\fBbc\fR" 4
.IX Item "bc"
bc [\-sqlw] [\s-1FILE\s0]...
.Sp
Arbitrary precision calculator
.Sp
.Vb 4
\&        \-q      Quiet
\&        \-l      Load standard library
\&        \-s      Be POSIX compatible
\&        \-w      Warn if extensions are used
.Ve
.Sp
\&\f(CW$BC_LINE_LENGTH\fR changes output width
.IP "\fBblkdiscard\fR" 4
.IX Item "blkdiscard"
blkdiscard [\-o \s-1OFS\s0] [\-l \s-1LEN\s0] [\-s] \s-1DEVICE\s0
.Sp
Discard sectors on \s-1DEVICE\s0
.Sp
.Vb 3
\&        \-o OFS  Byte offset into device
\&        \-l LEN  Number of bytes to discard
\&        \-s      Perform a secure discard
.Ve
.IP "\fBbootchartd\fR" 4
.IX Item "bootchartd"
bootchartd start [\s-1PROG ARGS\s0]|stop|init
.Sp
Create /var/log/bootchart.tgz with boot chart data
.Sp
start: start background logging; with \s-1PROG,\s0 run \s-1PROG,\s0 then kill logging with \s-1USR1\s0
stop: send \s-1USR1\s0 to all bootchartd processes
init: start background logging; stop when getty/xdm is seen (for init scripts)
Under \s-1PID 1:\s0 as init, then exec \f(CW$bootchart_init\fR, /init, /sbin/init
.IP "\fBbunzip2\fR" 4
.IX Item "bunzip2"
bunzip2 [\-cfk] [\s-1FILE\s0]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 4
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP "\fBbzcat\fR" 4
.IX Item "bzcat"
bzcat [\s-1FILE\s0]...
.Sp
Decompress to stdout
.IP "\fBbzip2\fR" 4
.IX Item "bzip2"
bzip2 [\-cfkdt123456789] [\s-1FILE\s0]...
.Sp
Compress FILEs (or stdin) with bzip2 algorithm
.Sp
.Vb 6
\&        \-1..9   Compression level
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP "\fBcal\fR" 4
.IX Item "cal"
cal [\-jmy] [[\s-1MONTH\s0] \s-1YEAR\s0]
.Sp
Display a calendar
.Sp
.Vb 3
\&        \-j      Use julian dates
\&        \-m      Week starts on Monday
\&        \-y      Display the entire year
.Ve
.IP "\fBcat\fR" 4
.IX Item "cat"
cat [\-nbvteA] [\s-1FILE\s0]...
.Sp
Print FILEs to stdout
.Sp
.Vb 6
\&        \-n      Number output lines
\&        \-b      Number nonempty lines
\&        \-v      Show nonprinting characters as ^x or M\-x
\&        \-t      ...and tabs as ^I
\&        \-e      ...and end lines with $
\&        \-A      Same as \-vte
.Ve
.IP "\fBchat\fR" 4
.IX Item "chat"
chat \s-1EXPECT\s0 [\s-1SEND\s0 [\s-1EXPECT\s0 [\s-1SEND\s0]]...]
.Sp
Useful for interacting with a modem connected to stdin/stdout.
A script consists of \*(L"expect-send\*(R" argument pairs.
Example:
.Sp
chat '' \s-1ATZ OK ATD123456 CONNECT\s0 '' ogin: pppuser word: ppppass '~'
.IP "\fBchattr\fR" 4
.IX Item "chattr"
chattr [\-R] [\-v \s-1VERSION\s0] [\-p \s-1PROJID\s0] [\-+=AacDdijsStTu] \s-1FILE...\s0
.Sp
Change ext2 file attributes
.Sp
.Vb 4
\&        \-R      Recurse
\&        \-v NUM  Set version/generation number
\&        \-p NUM  Set project number
\&Modifiers:
\&
\&        \-,+,=   Remove/add/set attributes
\&Attributes:
\&
\&        A       No atime
\&        a       Append only
\&        C       No copy\-on\-write
\&        c       Compressed
\&        D       Synchronous dir updates
\&        d       Don\*(Aqt backup with dump
\&        E       Encrypted
\&        e       File uses extents
\&        F       Case\-insensitive dir
\&        I       Indexed dir
\&        i       Immutable
\&        j       Write data to journal first
\&        N       File is stored in inode
\&        P       Hierarchical project ID dir
\&        S       Synchronous file updates
\&        s       Zero storage when deleted
\&        T       Top of dir hierarchy
\&        t       Don\*(Aqt tail\-merge with other files
\&        u       Allow undelete
\&        V       Verity
.Ve
.IP "\fBchgrp\fR" 4
.IX Item "chgrp"
chgrp [\-RhLHPcvf]... \s-1GROUP FILE...\s0
.Sp
Change the group membership of FILEs to \s-1GROUP\s0
.Sp
.Vb 8
\&        \-h      Affect symlinks instead of symlink targets
\&        \-L      Traverse all symlinks to directories
\&        \-H      Traverse symlinks on command line only
\&        \-P      Don\*(Aqt traverse symlinks (default)
\&        \-R      Recurse
\&        \-c      List changed files
\&        \-v      Verbose
\&        \-f      Hide errors
.Ve
.IP "\fBchmod\fR" 4
.IX Item "chmod"
chmod [\-Rcvf] MODE[,MODE]... \s-1FILE...\s0
.Sp
\&\s-1MODE\s0 is octal number (bit pattern sstrwxrwxrwx) or [ugoa]{+|\-|=}[rwxXst]
.Sp
.Vb 4
\&        \-R      Recurse
\&        \-c      List changed files
\&        \-v      Verbose
\&        \-f      Hide errors
.Ve
.IP "\fBchown\fR" 4
.IX Item "chown"
chown [\-RhLHPcvf]... USER[:[\s-1GRP\s0]] \s-1FILE...\s0
.Sp
Change the owner and/or group of FILEs to \s-1USER\s0 and/or \s-1GRP\s0
.Sp
.Vb 8
\&        \-h      Affect symlinks instead of symlink targets
\&        \-L      Traverse all symlinks to directories
\&        \-H      Traverse symlinks on command line only
\&        \-P      Don\*(Aqt traverse symlinks (default)
\&        \-R      Recurse
\&        \-c      List changed files
\&        \-v      Verbose
\&        \-f      Hide errors
.Ve
.IP "\fBchpasswd\fR" 4
.IX Item "chpasswd"
chpasswd [\-me] [\-c \s-1ALG\s0] [\-R \s-1DIR\s0]
.Sp
Read user:password from stdin and update /etc/passwd
.Sp
.Vb 4
\&        \-e      Supplied passwords are in encrypted form
\&        \-m      Encrypt using md5, not des
\&        \-c ALG  des,md5,sha256/512 (default des)
\&        \-R DIR  Directory to chroot into
.Ve
.IP "\fBchpst\fR" 4
.IX Item "chpst"
chpst [\-vP012] [\-u USER[:GRP]] [\-U USER[:GRP]] [\-e \s-1DIR\s0]
	[\-/ \s-1DIR\s0] [\-n \s-1NICE\s0] [\-m \s-1BYTES\s0] [\-d \s-1BYTES\s0] [\-o N]
	[\-p N] [\-f \s-1BYTES\s0] [\-c \s-1BYTES\s0] \s-1PROG ARGS\s0
.Sp
Change the process state, run \s-1PROG\s0
.Sp
.Vb 10
\&        \-u USER[:GRP]   Set uid and gid
\&        \-U USER[:GRP]   Set $UID and $GID in environment
\&        \-e DIR          Set environment variables as specified by files
\&                        in DIR: file=1st_line_of_file
\&        \-/ DIR          Chroot to DIR
\&        \-n NICE         Add NICE to nice value
\&        \-m BYTES        Same as \-d BYTES \-s BYTES \-l BYTES
\&        \-d BYTES        Limit data segment
\&        \-o N            Limit number of open files per process
\&        \-p N            Limit number of processes per uid
\&        \-f BYTES        Limit output file sizes
\&        \-c BYTES        Limit core file size
\&        \-v              Verbose
\&        \-P              Create new process group
\&        \-0              Close stdin
\&        \-1              Close stdout
\&        \-2              Close stderr
.Ve
.IP "\fBchroot\fR" 4
.IX Item "chroot"
chroot \s-1NEWROOT\s0 [\s-1PROG ARGS\s0]
.Sp
Run \s-1PROG\s0 with root directory set to \s-1NEWROOT\s0
.IP "\fBchrt\fR" 4
.IX Item "chrt"
chrt \-m | \-p [\s-1PRIO\s0] \s-1PID\s0 | [\-rfobi] \s-1PRIO PROG ARGS\s0
.Sp
Change scheduling priority and class for a process
.Sp
.Vb 7
\&        \-m      Show min/max priorities
\&        \-p      Operate on PID
\&        \-r      Set SCHED_RR class
\&        \-f      Set SCHED_FIFO class
\&        \-o      Set SCHED_OTHER class
\&        \-b      Set SCHED_BATCH class
\&        \-i      Set SCHED_IDLE class
.Ve
.IP "\fBcksum\fR" 4
.IX Item "cksum"
cksum \s-1FILE...\s0
.Sp
Calculate \s-1CRC32\s0 checksum of FILEs
.IP "\fBclear\fR" 4
.IX Item "clear"
clear
.Sp
Clear screen
.IP "\fBcmp\fR" 4
.IX Item "cmp"
cmp [\-ls] [\-n \s-1NUM\s0] \s-1FILE1\s0 [\s-1FILE2\s0 [\s-1SKIP1\s0 [\s-1SKIP2\s0]]]
.Sp
Compare \s-1FILE1\s0 with \s-1FILE2\s0 (or stdin)
.Sp
.Vb 4
\&        \-l      Write the byte numbers (decimal) and values (octal)
\&                for all differing bytes
\&        \-s      Quiet
\&        \-n NUM  Compare at most NUM bytes
.Ve
.IP "\fBcomm\fR" 4
.IX Item "comm"
comm [\-123] \s-1FILE1 FILE2\s0
.Sp
Compare \s-1FILE1\s0 with \s-1FILE2\s0
.Sp
.Vb 3
\&        \-1      Suppress lines unique to FILE1
\&        \-2      Suppress lines unique to FILE2
\&        \-3      Suppress lines common to both files
.Ve
.IP "\fBcp\fR" 4
.IX Item "cp"
cp [\-arPLHpfinlsTu] \s-1SOURCE DEST\s0
or: cp [\-arPLHpfinlsu] \s-1SOURCE...\s0 { \-t \s-1DIRECTORY\s0 | \s-1DIRECTORY\s0 }
.Sp
Copy SOURCEs to \s-1DEST\s0
.Sp
.Vb 10
\&        \-a      Same as \-dpR
\&        \-R,\-r   Recurse
\&        \-d,\-P   Preserve symlinks (default if \-R)
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-p      Preserve file attributes if possible
\&        \-f      Overwrite
\&        \-i      Prompt before overwrite
\&        \-n      Don\*(Aqt overwrite
\&        \-l,\-s   Create (sym)links
\&        \-T      Refuse to copy if DEST is a directory
\&        \-t DIR  Copy all SOURCEs into DIR
\&        \-u      Copy only newer files
.Ve
.IP "\fBcpio\fR" 4
.IX Item "cpio"
cpio [\-dmvu] [\-F \s-1FILE\s0] [\-R USER[:GRP]] [\-H newc] [\-tio] [\-p \s-1DIR\s0] [\s-1EXTR_FILE\s0]...
.Sp
Extract (\-i) or list (\-t) files from a cpio archive, or
take file list from stdin and create an archive (\-o) or copy files (\-p)
.Sp
Main operation mode:
.Sp
.Vb 5
\&        \-t      List
\&        \-i      Extract EXTR_FILEs (or all)
\&        \-o      Create (requires \-H newc)
\&        \-p DIR  Copy files to DIR
\&Options:
\&
\&        \-H newc Archive format
\&        \-d      Make leading directories
\&        \-m      Restore mtime
\&        \-v      Verbose
\&        \-u      Overwrite
\&        \-F FILE Input (\-t,\-i,\-p) or output (\-o) file
\&        \-R USER[:GRP]   Set owner of created files
\&        \-L      Dereference symlinks
\&        \-0      NUL terminated input
\&        \-\-ignore\-devno
\&        \-\-renumber\-inodes
.Ve
.IP "\fBcrc32\fR" 4
.IX Item "crc32"
crc32 \s-1FILE...\s0
.Sp
Calculate \s-1CRC32\s0 checksum of FILEs
.IP "\fBcrond\fR" 4
.IX Item "crond"
crond [\-fbS] [\-l N] [\-d N] [\-L \s-1LOGFILE\s0] [\-c \s-1DIR\s0]
.Sp
.Vb 7
\&        \-f      Foreground
\&        \-b      Background (default)
\&        \-S      Log to syslog (default)
\&        \-l N    Set log level. Most verbose 0, default 8
\&        \-d N    Set log level, log to stderr
\&        \-L FILE Log to FILE
\&        \-c DIR  Cron dir. Default:/var/spool/cron/crontabs
.Ve
.IP "\fBcrontab\fR" 4
.IX Item "crontab"
crontab [\-c \s-1DIR\s0] [\-u \s-1USER\s0] [\-ler]|[\s-1FILE\s0]
.Sp
.Vb 6
\&        \-c      Crontab directory
\&        \-u      User
\&        \-l      List crontab
\&        \-e      Edit crontab
\&        \-r      Delete crontab
\&        FILE    Replace crontab by FILE (\*(Aq\-\*(Aq: stdin)
.Ve
.IP "\fBcryptpw\fR" 4
.IX Item "cryptpw"
cryptpw [\-P \s-1FD\s0] [\-m \s-1TYPE\s0] [\-S \s-1SALT\s0] [\s-1PASSWORD\s0] [\s-1SALT\s0]
.Sp
Print \fBcrypt\fR\|(3) hashed \s-1PASSWORD\s0
.Sp
.Vb 3
\&        \-P N    Read password from fd N
\&        \-m TYPE des,md5,sha256/512 (default des)
\&        \-S SALT
.Ve
.IP "\fBcut\fR" 4
.IX Item "cut"
cut [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print selected fields from FILEs to stdout
.Sp
.Vb 9
\&        \-b LIST Output only bytes from LIST
\&        \-c LIST Output only characters from LIST
\&        \-d SEP  Field delimiter for input (default \-f TAB, \-F run of whitespace)
\&        \-O SEP  Field delimeter for output (default = \-d for \-f, one space for \-F)
\&        \-D      Don\*(Aqt sort/collate sections or match \-fF lines without delimeter
\&        \-f LIST Print only these fields (\-d is single char)
\&        \-F LIST Print only these fields (\-d is regex)
\&        \-s      Output only lines containing delimiter
\&        \-n      Ignored
.Ve
.IP "\fBdate\fR" 4
.IX Item "date"
date [\s-1OPTIONS\s0] [+FMT] [[\-s] \s-1TIME\s0]
.Sp
Display time (using +FMT), or set time
.Sp
.Vb 8
\&        \-u              Work in UTC (don\*(Aqt convert to local time)
\&        [\-s] TIME       Set time to TIME
\&        \-d TIME         Display TIME, not \*(Aqnow\*(Aq
\&        \-D FMT          FMT (strptime format) for \-s/\-d TIME conversion
\&        \-r FILE         Display last modification time of FILE
\&        \-R              Output RFC\-2822 date
\&        \-I[SPEC]        Output ISO\-8601 date
\&                        SPEC=date (default), hours, minutes, seconds or ns
.Ve
.Sp
Recognized \s-1TIME\s0 formats:
.Sp
.Vb 6
\&        @seconds_since_1970
\&        hh:mm[:ss]
\&        [YYYY.]MM.DD\-hh:mm[:ss]
\&        YYYY\-MM\-DD hh:mm[:ss]
\&        [[[[[YY]YY]MM]DD]hh]mm[.ss]
\&        \*(Aqdate TIME\*(Aq form accepts MMDDhhmm[[YY]YY][.ss] instead
.Ve
.IP "\fBdc\fR" 4
.IX Item "dc"
dc [\-x] [\-eSCRIPT]... [\-fFILE]... [\s-1FILE\s0]...
.Sp
Tiny \s-1RPN\s0 calculator. Operations:
Arithmetic: + \- * / % ^
~ \- divide with remainder
| \- modular exponentiation
v \- square root
p \- print top of the stack without popping
f \- print entire stack
k \- pop the value and set precision
i \- pop the value and set input radix
o \- pop the value and set output radix
Examples: dc \-e'2 2 + p' \-> 4, dc \-e'8 8 * 2 2 + / p' \-> 16
.IP "\fBdd\fR" 4
.IX Item "dd"
dd [if=FILE] [of=FILE] [ibs=N obs=N/bs=N] [count=N] [skip=N] [seek=N]
	[conv=notrunc|noerror|sync|fsync]
	[iflag=skip_bytes|count_bytes|fullblock|direct] [oflag=seek_bytes|append|direct]
.Sp
Copy a file with converting and formatting
.Sp
.Vb 10
\&        if=FILE         Read from FILE instead of stdin
\&        of=FILE         Write to FILE instead of stdout
\&        bs=N            Read and write N bytes at a time
\&        ibs=N           Read N bytes at a time
\&        obs=N           Write N bytes at a time
\&        count=N         Copy only N input blocks
\&        skip=N          Skip N input blocks
\&        seek=N          Skip N output blocks
\&        conv=notrunc    Don\*(Aqt truncate output file
\&        conv=noerror    Continue after read errors
\&        conv=sync       Pad blocks with zeros
\&        conv=fsync      Physically write data out before finishing
\&        conv=swab       Swap every pair of bytes
\&        iflag=skip_bytes        skip=N is in bytes
\&        iflag=count_bytes       count=N is in bytes
\&        oflag=seek_bytes        seek=N is in bytes
\&        iflag=direct    O_DIRECT input
\&        oflag=direct    O_DIRECT output
\&        iflag=fullblock Read full blocks
\&        oflag=append    Open output in append mode
\&        status=noxfer   Suppress rate output
\&        status=none     Suppress all output
.Ve
.Sp
N may be suffixed by c (1), w (2), b (512), kB (1000), k (1024), \s-1MB, M, GB, G\s0
.IP "\fBdelgroup\fR" 4
.IX Item "delgroup"
delgroup [\s-1USER\s0] \s-1GROUP\s0
.Sp
Delete group \s-1GROUP\s0 from the system or user \s-1USER\s0 from group \s-1GROUP\s0
.IP "\fBdeluser\fR" 4
.IX Item "deluser"
deluser [\-\-remove\-home] \s-1USER\s0
.Sp
Delete \s-1USER\s0 from the system
.IP "\fBdevmem\fR" 4
.IX Item "devmem"
devmem \s-1ADDRESS\s0 [\s-1WIDTH\s0 [\s-1VALUE\s0]]
.Sp
Read/write from physical address
.Sp
.Vb 3
\&        ADDRESS Address to act upon
\&        WIDTH   Width (8/16/...)
\&        VALUE   Data to be written
.Ve
.IP "\fBdf\fR" 4
.IX Item "df"
df [\-PkmhTai] [\-B \s-1SIZE\s0] [\-t \s-1TYPE\s0] [\s-1FILESYSTEM\s0]...
.Sp
Print filesystem usage statistics
.Sp
.Vb 9
\&        \-P      POSIX output format
\&        \-k      1024\-byte blocks (default)
\&        \-m      1M\-byte blocks
\&        \-h      Human readable (e.g. 1K 243M 2G)
\&        \-T      Print filesystem type
\&        \-t TYPE Print only mounts of this type
\&        \-a      Show all filesystems
\&        \-i      Inodes
\&        \-B SIZE Blocksize
.Ve
.IP "\fBdiff\fR" 4
.IX Item "diff"
diff [\-abBdiNqrTstw] [\-L \s-1LABEL\s0] [\-S \s-1FILE\s0] [\-U \s-1LINES\s0] \s-1FILE1 FILE2\s0
.Sp
Compare files line by line and output the differences between them.
This implementation supports unified diffs only.
.Sp
.Vb 10
\&        \-a      Treat all files as text
\&        \-b      Ignore changes in the amount of whitespace
\&        \-B      Ignore changes whose lines are all blank
\&        \-d      Try hard to find a smaller set of changes
\&        \-i      Ignore case differences
\&        \-L      Use LABEL instead of the filename in the unified header
\&        \-N      Treat absent files as empty
\&        \-q      Output only whether files differ
\&        \-r      Recurse
\&        \-S      Start with FILE when comparing directories
\&        \-T      Make tabs line up by prefixing a tab when necessary
\&        \-s      Report when two files are the same
\&        \-t      Expand tabs to spaces in output
\&        \-U      Output LINES lines of context
\&        \-w      Ignore all whitespace
.Ve
.IP "\fBdirname\fR" 4
.IX Item "dirname"
dirname \s-1FILENAME\s0
.Sp
Strip non-directory suffix from \s-1FILENAME\s0
.IP "\fBdmesg\fR" 4
.IX Item "dmesg"
dmesg [\-cr] [\-n \s-1LEVEL\s0] [\-s \s-1SIZE\s0]
.Sp
Print or control the kernel ring buffer
.Sp
.Vb 4
\&        \-c              Clear ring buffer after printing
\&        \-n LEVEL        Set console logging level
\&        \-s SIZE         Buffer size
\&        \-r              Print raw message buffer
.Ve
.IP "\fBdnsd\fR" 4
.IX Item "dnsd"
dnsd [\-dvs] [\-c \s-1CONFFILE\s0] [\-t \s-1TTL_SEC\s0] [\-p \s-1PORT\s0] [\-i \s-1ADDR\s0]
.Sp
Small static \s-1DNS\s0 server daemon
.Sp
.Vb 10
\&        \-c FILE Config file
\&        \-t SEC  TTL
\&        \-p PORT Listen on PORT
\&        \-i ADDR Listen on ADDR
\&        \-d      Daemonize
\&        \-v      Verbose
\&        \-s      Send successful replies only. Use this if you want
\&                to use /etc/resolv.conf with two nameserver lines:
\&                        nameserver DNSD_SERVER
\&                        nameserver NORMAL_DNS_SERVER
.Ve
.IP "\fBdos2unix\fR" 4
.IX Item "dos2unix"
dos2unix [\-ud] [\s-1FILE\s0]
.Sp
Convert \s-1FILE\s0 in-place from \s-1DOS\s0 to Unix format.
When no file is given, use stdin/stdout.
.Sp
.Vb 2
\&        \-u      dos2unix
\&        \-d      unix2dos
.Ve
.IP "\fBdu\fR" 4
.IX Item "du"
du [\-aHLdclsxhmk] [\s-1FILE\s0]...
.Sp
Summarize disk space used for FILEs (or directories)
.Sp
.Vb 10
\&        \-a      Show file sizes too
\&        \-b      Apparent size (including holes)
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-d N    Limit output to directories (and files with \-a) of depth < N
\&        \-c      Show grand total
\&        \-l      Count sizes many times if hard linked
\&        \-s      Display only a total for each argument
\&        \-x      Skip directories on different filesystems
\&        \-h      Sizes in human readable format (e.g., 1K 243M 2G)
\&        \-m      Sizes in megabytes
\&        \-k      Sizes in kilobytes
\&                Default unit is 512 bytes
.Ve
.IP "\fBecho\fR" 4
.IX Item "echo"
echo [\-neE] [\s-1ARG\s0]...
.Sp
Print ARGs to stdout
.Sp
.Vb 3
\&        \-n      No trailing newline
\&        \-e      Interpret backslash escapes (\et=tab etc)
\&        \-E      Don\*(Aqt interpret backslash escapes (default)
.Ve
.IP "\fBed\fR" 4
.IX Item "ed"
ed [\-p \s-1PROMPT\s0] [\-s] [\s-1FILE\s0]
.IP "\fBenv\fR" 4
.IX Item "env"
env [\-i0] [\-u \s-1NAME\s0]... [\-] [NAME=VALUE]... [\s-1PROG ARGS\s0]
.Sp
Print current environment or run \s-1PROG\s0 after setting up environment
.Sp
.Vb 3
\&        \-, \-i   Start with empty environment
\&        \-0      NUL terminated output
\&        \-u NAME Remove variable from environment
.Ve
.IP "\fBenvdir\fR" 4
.IX Item "envdir"
envdir \s-1DIR PROG ARGS\s0
.Sp
Set various environment variables as specified by files
in the directory \s-1DIR,\s0 run \s-1PROG\s0
.IP "\fBenvuidgid\fR" 4
.IX Item "envuidgid"
envuidgid \s-1USER PROG ARGS\s0
.Sp
Set \f(CW$UID\fR to \s-1USER\s0's uid and \f(CW$GID\fR to \s-1USER\s0's gid, run \s-1PROG\s0
.IP "\fBexpand\fR" 4
.IX Item "expand"
expand [\-i] [\-t N] [\s-1FILE\s0]...
.Sp
Convert tabs to spaces, writing to stdout
.Sp
.Vb 2
\&        \-i      Don\*(Aqt convert tabs after non blanks
\&        \-t      Tabstops every N chars
.Ve
.IP "\fBexpr\fR" 4
.IX Item "expr"
expr \s-1EXPRESSION\s0
.Sp
Print the value of \s-1EXPRESSION\s0
.Sp
\&\s-1EXPRESSION\s0 may be:
.Sp
.Vb 10
\&        ARG1 | ARG2     ARG1 if it is neither null nor 0, otherwise ARG2
\&        ARG1 & ARG2     ARG1 if neither argument is null or 0, otherwise 0
\&        ARG1 < ARG2     1 if ARG1 is less than ARG2, else 0. Similarly:
\&        ARG1 <= ARG2
\&        ARG1 = ARG2
\&        ARG1 != ARG2
\&        ARG1 >= ARG2
\&        ARG1 > ARG2
\&        ARG1 + ARG2     Sum of ARG1 and ARG2. Similarly:
\&        ARG1 \- ARG2
\&        ARG1 * ARG2
\&        ARG1 / ARG2
\&        ARG1 % ARG2
\&        STRING : REGEXP         Anchored pattern match of REGEXP in STRING
\&        match STRING REGEXP     Same as STRING : REGEXP
\&        substr STRING POS LEN   Substring of STRING, POS counts from 1
\&        index STRING CHARS      Index in STRING where any CHARS is found, or 0
\&        length STRING           Length of STRING
\&        quote TOKEN             Interpret TOKEN as a string, even if
\&                                it is a keyword like \*(Aqmatch\*(Aq or an
\&                                operator like \*(Aq/\*(Aq
\&        (EXPRESSION)            Value of EXPRESSION
.Ve
.Sp
Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\&\e( and \e) or null; if \e( and \e) are not used, they return the number
of characters matched or 0.
.IP "\fBfactor\fR" 4
.IX Item "factor"
factor [\s-1NUMBER\s0]...
.Sp
Print prime factors
.IP "\fBfakeidentd\fR" 4
.IX Item "fakeidentd"
fakeidentd [\-fiw] [\-b \s-1ADDR\s0] [\s-1STRING\s0]
.Sp
Provide fake ident (auth) service
.Sp
.Vb 5
\&        \-f      Run in foreground
\&        \-i      Inetd mode
\&        \-w      Inetd \*(Aqwait\*(Aq mode
\&        \-b ADDR Bind to specified address
\&        STRING  Ident answer string (default: nobody)
.Ve
.IP "\fBfallocate\fR" 4
.IX Item "fallocate"
fallocate [\-o \s-1OFS\s0] \-l \s-1LEN FILE\s0
.Sp
Preallocate space for \s-1FILE\s0
.Sp
.Vb 2
\&        \-o OFS  Offset of range
\&        \-l LEN  Length of range
.Ve
.IP "\fBfatattr\fR" 4
.IX Item "fatattr"
fatattr [\-+rhsvda] \s-1FILE...\s0
.Sp
Change file attributes on \s-1FAT\s0 filesystem
.Sp
.Vb 8
\&        \-       Clear attributes
\&        +       Set attributes
\&        r       Read only
\&        h       Hidden
\&        s       System
\&        v       Volume label
\&        d       Directory
\&        a       Archive
.Ve
.IP "\fBfind\fR" 4
.IX Item "find"
find [\-HL] [\s-1PATH\s0]... [\s-1OPTIONS\s0] [\s-1ACTIONS\s0]
.Sp
Search for files and perform actions on them.
First failed action stops processing of current file.
Defaults: \s-1PATH\s0 is current directory, action is '\-print'
.Sp
.Vb 7
\&        \-L,\-follow      Follow symlinks
\&        \-H              ...on command line only
\&        \-xdev           Don\*(Aqt descend directories on other filesystems
\&        \-maxdepth N     Descend at most N levels. \-maxdepth 0 applies
\&                        actions to command line arguments only
\&        \-mindepth N     Don\*(Aqt act on first N levels
\&        \-depth          Act on directory *after* traversing it
.Ve
.Sp
Actions:
.Sp
.Vb 10
\&        ( ACTIONS )     Group actions for \-o / \-a
\&        ! ACT           Invert ACT\*(Aqs success/failure
\&        ACT1 [\-a] ACT2  If ACT1 fails, stop, else do ACT2
\&        ACT1 \-o ACT2    If ACT1 succeeds, stop, else do ACT2
\&                        Note: \-a has higher priority than \-o
\&        \-name PATTERN   Match file name (w/o directory name) to PATTERN
\&        \-iname PATTERN  Case insensitive \-name
\&        \-path PATTERN   Match path to PATTERN
\&        \-ipath PATTERN  Case insensitive \-path
\&        \-regex PATTERN  Match path to regex PATTERN
\&        \-type X         File type is X (one of: f,d,l,b,c,s,p)
\&        \-executable     File is executable
\&        \-perm MASK      At least one mask bit (+MASK), all bits (\-MASK),
\&                        or exactly MASK bits are set in file\*(Aqs mode
\&        \-mtime DAYS     mtime is greater than (+N), less than (\-N),
\&                        or exactly N days in the past
\&        \-atime DAYS     atime +N/\-N/N days in the past
\&        \-ctime DAYS     ctime +N/\-N/N days in the past
\&        \-mmin MINS      mtime is greater than (+N), less than (\-N),
\&                        or exactly N minutes in the past
\&        \-amin MINS      atime +N/\-N/N minutes in the past
\&        \-cmin MINS      ctime +N/\-N/N minutes in the past
\&        \-newer FILE     mtime is more recent than FILE\*(Aqs
\&        \-inum N         File has inode number N
\&        \-samefile FILE  File is same as FILE
\&        \-user NAME/ID   File is owned by given user
\&        \-group NAME/ID  File is owned by given group
\&        \-size N[bck]    File size is N (c:bytes,k:kbytes,b:512 bytes(def.))
\&                        +/\-N: file size is bigger/smaller than N
\&        \-links N        Number of links is greater than (+N), less than (\-N),
\&                        or exactly N
\&        \-empty          Match empty file/directory
\&        \-prune          If current file is directory, don\*(Aqt descend into it
\&If none of the following actions is specified, \-print is assumed
\&        \-print          Print file name
\&        \-print0         Print file name, NUL terminated
\&        \-exec CMD ARG ; Run CMD with all instances of {} replaced by
\&                        file name. Fails if CMD exits with nonzero
\&        \-exec CMD ARG + Run CMD with {} replaced by list of file names
\&        \-delete         Delete current file/directory. Turns on \-depth option
\&        \-quit           Exit
.Ve
.IP "\fBflock\fR" 4
.IX Item "flock"
flock [\-sxun] \s-1FD\s0 | { \s-1FILE\s0 [\-c] \s-1PROG ARGS\s0 }
.Sp
[Un]lock file descriptor, or lock \s-1FILE,\s0 run \s-1PROG\s0
.Sp
.Vb 4
\&        \-s      Shared lock
\&        \-x      Exclusive lock (default)
\&        \-u      Unlock FD
\&        \-n      Fail rather than wait
.Ve
.IP "\fBfold\fR" 4
.IX Item "fold"
fold [\-bs] [\-w \s-1WIDTH\s0] [\s-1FILE\s0]...
.Sp
Wrap input lines in FILEs (or stdin), writing to stdout
.Sp
.Vb 3
\&        \-b      Count bytes rather than columns
\&        \-s      Break at spaces
\&        \-w      Use WIDTH columns instead of 80
.Ve
.IP "\fBfsck.minix\fR" 4
.IX Item "fsck.minix"
fsck.minix [\-larvsmf] \s-1BLOCKDEV\s0
.Sp
Check \s-1MINIX\s0 filesystem
.Sp
.Vb 7
\&        \-l      List all filenames
\&        \-r      Perform interactive repairs
\&        \-a      Perform automatic repairs
\&        \-v      Verbose
\&        \-s      Output superblock information
\&        \-m      Show "mode not cleared" warnings
\&        \-f      Force file system check
.Ve
.IP "\fBfsfreeze\fR" 4
.IX Item "fsfreeze"
fsfreeze \-\-[un]freeze \s-1MOUNTPOINT\s0
.Sp
Flush and halt writes to \s-1MOUNTPOINT\s0
.IP "\fBfstrim\fR" 4
.IX Item "fstrim"
fstrim [\s-1OPTIONS\s0] \s-1MOUNTPOINT\s0
.Sp
.Vb 4
\&        \-o OFFSET       Offset in bytes to discard from
\&        \-l LEN          Bytes to discard
\&        \-m MIN          Minimum extent length
\&        \-v              Print number of discarded bytes
.Ve
.IP "\fBfsync\fR" 4
.IX Item "fsync"
fsync [\-d] \s-1FILE...\s0
.Sp
Write all buffered blocks in FILEs to disk
.Sp
.Vb 1
\&        \-d      Avoid syncing metadata
.Ve
.IP "\fBftpd\fR" 4
.IX Item "ftpd"
ftpd [\-wvS] [\-a \s-1USER\s0] [\-t \s-1SEC\s0] [\-T \s-1SEC\s0] [\s-1DIR\s0]
.Sp
\&\s-1FTP\s0 server. Chroots to \s-1DIR,\s0 if this fails (run by non-root), cds to it.
It is an inetd service, inetd.conf line:
	21 stream tcp nowait root ftpd ftpd /files/to/serve
Can be run from tcpsvd:
.Sp
.Vb 1
\&        tcpsvd \-vE 0.0.0.0 21 ftpd /files/to/serve
\&
\&        \-w      Allow upload
\&        \-A      No login required, client access occurs under ftpd\*(Aqs UID
\&        \-a USER Enable \*(Aqanonymous\*(Aq login and map it to USER
\&        \-v      Log errors to stderr. \-vv: verbose log
\&        \-S      Log errors to syslog. \-SS: verbose log
\&        \-t,\-T N Idle and absolute timeout
.Ve
.IP "\fBftpget\fR" 4
.IX Item "ftpget"
ftpget [\s-1OPTIONS\s0] \s-1HOST\s0 [\s-1LOCAL_FILE\s0] \s-1REMOTE_FILE\s0
.Sp
Download a file via \s-1FTP\s0
.Sp
.Vb 5
\&        \-c      Continue previous transfer
\&        \-v      Verbose
\&        \-u USER Username
\&        \-p PASS Password
\&        \-P PORT
.Ve
.IP "\fBftpput\fR" 4
.IX Item "ftpput"
ftpput [\s-1OPTIONS\s0] \s-1HOST\s0 [\s-1REMOTE_FILE\s0] \s-1LOCAL_FILE\s0
.Sp
Upload a file to a \s-1FTP\s0 server
.Sp
.Vb 4
\&        \-v      Verbose
\&        \-u USER Username
\&        \-p PASS Password
\&        \-P PORT
.Ve
.IP "\fBfuser\fR" 4
.IX Item "fuser"
fuser [\-msk46] [\-SIGNAL] \s-1FILE\s0 or \s-1PORT/PROTO\s0
.Sp
Find processes which use FILEs or PORTs
.Sp
.Vb 5
\&        \-m      Find processes which use same fs as FILEs
\&        \-4,\-6   Search only IPv4/IPv6 space
\&        \-s      Don\*(Aqt display PIDs
\&        \-k      Kill found processes
\&        \-SIGNAL Signal to send (default: KILL)
.Ve
.IP "\fBgetopt\fR" 4
.IX Item "getopt"
getopt [\s-1OPTIONS\s0] [\-\-] \s-1OPTSTRING PARAMS\s0
.Sp
.Vb 9
\&        \-a              Allow long options starting with single \-
\&        \-l LOPT[,...]   Long options to recognize
\&        \-n PROGNAME     The name under which errors are reported
\&        \-o OPTSTRING    Short options to recognize
\&        \-q              No error messages on unrecognized options
\&        \-Q              No normal output
\&        \-s SHELL        Set shell quoting conventions
\&        \-T              Version test (exits with 4)
\&        \-u              Don\*(Aqt quote output
.Ve
.Sp
Example:
.Sp
O=`getopt \-l bb: \*(-- ab:c:: \*(L"$@\*(R"` || exit 1
eval set \*(-- \*(L"$O\*(R"
while true; do
	case \*(L"$1\*(R" in
	\-a)	echo A; shift;;
	\-b|\-\-bb) echo \*(L"B:'$2'\*(R"; shift 2;;
	\-c)	case \*(L"$2\*(R" in
		"\*(L")	echo C; shift 2;;
		*)	echo \*(R"C:'$2'"; shift 2;;
		esac;;
	\-\-)	shift; break;;
	*)	echo Error; exit 1;;
	esac
done
.IP "\fBgetty\fR" 4
.IX Item "getty"
getty [\s-1OPTIONS\s0] BAUD_RATE[,BAUD_RATE]... \s-1TTY\s0 [\s-1TERMTYPE\s0]
.Sp
Open \s-1TTY,\s0 prompt for login name, then invoke /bin/login
.Sp
.Vb 11
\&        \-h              Enable hardware RTS/CTS flow control
\&        \-L              Set CLOCAL (ignore Carrier Detect state)
\&        \-m              Get baud rate from modem\*(Aqs CONNECT status message
\&        \-n              Don\*(Aqt prompt for login name
\&        \-w              Wait for CR or LF before sending /etc/issue
\&        \-i              Don\*(Aqt display /etc/issue
\&        \-f ISSUE_FILE   Display ISSUE_FILE instead of /etc/issue
\&        \-l LOGIN        Invoke LOGIN instead of /bin/login
\&        \-t SEC          Terminate after SEC if no login name is read
\&        \-I INITSTR      Send INITSTR before anything else
\&        \-H HOST         Log HOST into the utmp file as the hostname
.Ve
.Sp
\&\s-1BAUD_RATE\s0 of 0 leaves it unchanged
.IP "\fBgrep\fR" 4
.IX Item "grep"
grep [\-HhnlLoqvsrRiwFE] [\-m N] [\-A|B|C N] { \s-1PATTERN\s0 | \-e \s-1PATTERN...\s0 | \-f \s-1FILE...\s0 } [\s-1FILE\s0]...
.Sp
Search for \s-1PATTERN\s0 in FILEs (or stdin)
.Sp
.Vb 10
\&        \-H      Add \*(Aqfilename:\*(Aq prefix
\&        \-h      Do not add \*(Aqfilename:\*(Aq prefix
\&        \-n      Add \*(Aqline_no:\*(Aq prefix
\&        \-l      Show only names of files that match
\&        \-L      Show only names of files that don\*(Aqt match
\&        \-c      Show only count of matching lines
\&        \-o      Show only the matching part of line
\&        \-q      Quiet. Return 0 if PATTERN is found, 1 otherwise
\&        \-v      Select non\-matching lines
\&        \-s      Suppress open and read errors
\&        \-r      Recurse
\&        \-R      Recurse and dereference symlinks
\&        \-i      Ignore case
\&        \-w      Match whole words only
\&        \-x      Match whole lines only
\&        \-F      PATTERN is a literal (not regexp)
\&        \-E      PATTERN is an extended regexp
\&        \-m N    Match up to N times per file
\&        \-A N    Print N lines of trailing context
\&        \-B N    Print N lines of leading context
\&        \-C N    Same as \*(Aq\-A N \-B N\*(Aq
\&        \-e PTRN Pattern to match
\&        \-f FILE Read pattern from file
.Ve
.IP "\fBgroups\fR" 4
.IX Item "groups"
groups [\s-1USER\s0]
.Sp
Print the groups \s-1USER\s0 is in
.IP "\fBgunzip\fR" 4
.IX Item "gunzip"
gunzip [\-cfkt] [\s-1FILE\s0]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 4
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP "\fBgzip\fR" 4
.IX Item "gzip"
gzip [\-cfkdt] [\s-1FILE\s0]...
.Sp
Compress FILEs (or stdin)
.Sp
.Vb 5
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP "\fBhalt\fR" 4
.IX Item "halt"
halt [\-d \s-1DELAY\s0] [\-nf]
.Sp
Halt the system
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP "\fBhd\fR" 4
.IX Item "hd"
hd \s-1FILE...\s0
.Sp
hd is an alias for hexdump \-C
.IP "\fBhead\fR" 4
.IX Item "head"
head [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print first 10 lines of FILEs (or stdin).
With more than one \s-1FILE,\s0 precede each with a filename header.
.Sp
.Vb 6
\&        \-n N[bkm]       Print first N lines
\&        \-n \-N[bkm]      Print all except N last lines
\&        \-c [\-]N[bkm]    Print first N bytes
\&                        (b:*512 k:*1024 m:*1024^2)
\&        \-q              Never print headers
\&        \-v              Always print headers
.Ve
.IP "\fBhexdump\fR" 4
.IX Item "hexdump"
hexdump [\-bcdoxCv] [\-e \s-1FMT\s0] [\-f \s-1FMT_FILE\s0] [\-n \s-1LEN\s0] [\-s \s-1OFS\s0] [\s-1FILE\s0]...
.Sp
Display FILEs (or stdin) in a user specified format
.Sp
.Vb 11
\&        \-b              1\-byte octal display
\&        \-c              1\-byte character display
\&        \-d              2\-byte decimal display
\&        \-o              2\-byte octal display
\&        \-x              2\-byte hex display
\&        \-C              hex+ASCII 16 bytes per line
\&        \-v              Show all (no dup folding)
\&        \-e FORMAT_STR   Example: \*(Aq16/1 "%02x|""\en"\*(Aq
\&        \-f FORMAT_FILE
\&        \-n LENGTH       Show only first LENGTH bytes
\&        \-s OFFSET       Skip OFFSET bytes
.Ve
.IP "\fBhexedit\fR" 4
.IX Item "hexedit"
hexedit \s-1FILE\s0
.Sp
Edit \s-1FILE\s0 in hexadecimal
.IP "\fBhostid\fR" 4
.IX Item "hostid"
hostid
.Sp
Print out a unique 32\-bit identifier for the machine
.IP "\fBhostname\fR" 4
.IX Item "hostname"
hostname [\-sidf] [\s-1HOSTNAME\s0 | \-F \s-1FILE\s0]
.Sp
Show or set hostname or \s-1DNS\s0 domain name
.Sp
.Vb 5
\&        \-s      Short
\&        \-i      Addresses for the hostname
\&        \-d      DNS domain name
\&        \-f      Fully qualified domain name
\&        \-F FILE Use FILE\*(Aqs content as hostname
.Ve
.IP "\fBhttpd\fR" 4
.IX Item "httpd"
httpd [\-ifv[v]] [\-c \s-1CONFFILE\s0] [\-p [\s-1IP:\s0]PORT] [\-u USER[:GRP]] [\-r \s-1REALM\s0] [\-h \s-1HOME\s0]
or httpd \-d/\-e/\-m \s-1STRING\s0
.Sp
Listen for incoming \s-1HTTP\s0 requests
.Sp
.Vb 11
\&        \-i              Inetd mode
\&        \-f              Run in foreground
\&        \-v[v]           Verbose
\&        \-p [IP:]PORT    Bind to IP:PORT (default *:80)
\&        \-u USER[:GRP]   Set uid/gid after binding to port
\&        \-r REALM        Authentication Realm for Basic Authentication
\&        \-h HOME         Home directory (default .)
\&        \-c FILE         Configuration file (default {/etc,HOME}/httpd.conf)
\&        \-m STRING       MD5 crypt STRING
\&        \-e STRING       HTML encode STRING
\&        \-d STRING       URL decode STRING
.Ve
.IP "\fBhush\fR" 4
.IX Item "hush"
hush [\-enxl] [\-c '\s-1SCRIPT\s0' [\s-1ARG0 ARGS\s0] | \s-1FILE ARGS\s0 | \-s \s-1ARGS\s0]
.Sp
Unix shell interpreter
.IP "\fBi2cdetect\fR" 4
.IX Item "i2cdetect"
i2cdetect \-l | \-F I2CBUS | [\-ya] [\-q|\-r] I2CBUS [\s-1FIRST LAST\s0]
.Sp
Detect I2C chips
.Sp
.Vb 7
\&        \-l      List installed buses
\&        \-F BUS# List functionalities on this bus
\&        \-y      Disable interactive mode
\&        \-a      Force scanning of non\-regular addresses
\&        \-q      Use smbus quick write commands for probing (default)
\&        \-r      Use smbus read byte commands for probing
\&        FIRST and LAST limit probing range
.Ve
.IP "\fBi2cdump\fR" 4
.IX Item "i2cdump"
i2cdump [\-fy] [\-r \s-1FIRST\-LAST\s0] \s-1BUS ADDR\s0 [\s-1MODE\s0]
.Sp
Examine I2C registers
.Sp
.Vb 3
\&        I2CBUS  I2C bus number
\&        ADDRESS 0x03\-0x77
\&MODE is:
\&
\&        b       Byte (default)
\&        w       Word
\&        W       Word on even register addresses
\&        i       I2C block
\&        s       SMBus block
\&        c       Consecutive byte
\&        Append p for SMBus PEC
\&
\&        \-f      Force access
\&        \-y      Disable interactive mode
\&        \-r      Limit the number of registers being accessed
.Ve
.IP "\fBi2cget\fR" 4
.IX Item "i2cget"
i2cget [\-fy] \s-1BUS\s0 CHIP-ADDRESS [\s-1DATA\-ADDRESS\s0 [\s-1MODE\s0]]
.Sp
Read from I2C/SMBus chip registers
.Sp
.Vb 3
\&        I2CBUS  I2C bus number
\&        ADDRESS 0x03\-0x77
\&MODE is:
\&
\&        b       Read byte data (default)
\&        w       Read word data
\&        c       Write byte/read byte
\&        Append p for SMBus PEC
\&
\&        \-f      Force access
\&        \-y      Disable interactive mode
.Ve
.IP "\fBi2cset\fR" 4
.IX Item "i2cset"
i2cset [\-fy] [\-m \s-1MASK\s0] \s-1BUS\s0 CHIP-ADDRESS DATA-ADDRESS [\s-1VALUE\s0] ... [\s-1MODE\s0]
.Sp
Set I2C registers
.Sp
.Vb 3
\&        I2CBUS  I2C bus number
\&        ADDRESS 0x03\-0x77
\&MODE is:
\&
\&        c       Byte, no value
\&        b       Byte data (default)
\&        w       Word data
\&        i       I2C block data
\&        s       SMBus block data
\&        Append p for SMBus PEC
\&
\&        \-f      Force access
\&        \-y      Disable interactive mode
\&        \-r      Read back and compare the result
\&        \-m MASK Mask specifying which bits to write
.Ve
.IP "\fBi2ctransfer\fR" 4
.IX Item "i2ctransfer"
i2ctransfer [\-fay] I2CBUS { rLENGTH[@ADDR] | wLENGTH[@ADDR] \s-1DATA...\s0}...
.Sp
Read/write I2C data in one transfer
.Sp
.Vb 3
\&        \-f      Force access to busy addresses
\&        \-a      Force access to non\-regular addresses
\&        \-y      Disable interactive mode
.Ve
.IP "\fBid\fR" 4
.IX Item "id"
id [\-ugGnr] [\s-1USER\s0]
.Sp
Print information about \s-1USER\s0 or the current user
.Sp
.Vb 5
\&        \-u      User ID
\&        \-g      Group ID
\&        \-G      Supplementary group IDs
\&        \-n      Print names instead of numbers
\&        \-r      Print real ID instead of effective ID
.Ve
.IP "\fBifdown\fR" 4
.IX Item "ifdown"
ifdown [\-nvf] [\-i \s-1FILE\s0] \-a | \s-1IFACE...\s0
.Sp
.Vb 5
\&        \-a      Deconfigure all interfaces
\&        \-i FILE Use FILE instead of /etc/network/interfaces
\&        \-n      Dry run
\&        \-v      Print out what would happen before doing it
\&        \-f      Force
.Ve
.IP "\fBifup\fR" 4
.IX Item "ifup"
ifup [\-nvf] [\-i \s-1FILE\s0] \-a | \s-1IFACE...\s0
.Sp
.Vb 5
\&        \-a      Configure all interfaces
\&        \-i FILE Use FILE instead of /etc/network/interfaces
\&        \-n      Dry run
\&        \-v      Print out what would happen before doing it
\&        \-f      Force
.Ve
.IP "\fBinetd\fR" 4
.IX Item "inetd"
inetd [\-fe] [\-q N] [\-R N] [\s-1CONFFILE\s0]
.Sp
Listen for network connections and launch programs
.Sp
.Vb 6
\&        \-f      Run in foreground
\&        \-e      Log to stderr
\&        \-q N    Socket listen queue (default 128)
\&        \-R N    Pause services after N connects/min
\&                (default 0 \- disabled)
\&        Default CONFFILE is /etc/inetd.conf
.Ve
.IP "\fBinit\fR" 4
.IX Item "init"
init
.Sp
Init is the first process started during boot. It never exits.
It (re)spawns children according to /etc/inittab.
Signals:
.Sp
\&\s-1HUP:\s0 reload /etc/inittab
\&\s-1TSTP:\s0 stop respawning until \s-1CONT
QUIT:\s0 re-exec another init
\&\s-1USR1/TERM/USR2/INT:\s0 run halt/reboot/poweroff/Ctrl\-Alt\-Del script
.IP "\fBinstall\fR" 4
.IX Item "install"
install [\-cdDsp] [\-o \s-1USER\s0] [\-g \s-1GRP\s0] [\-m \s-1MODE\s0] [\-t \s-1DIR\s0] [\s-1SOURCE\s0]... \s-1DEST\s0
.Sp
Copy files and set attributes
.Sp
.Vb 9
\&        \-c      Just copy (default)
\&        \-d      Create directories
\&        \-D      Create leading target directories
\&        \-s      Strip symbol table
\&        \-p      Preserve date
\&        \-o USER Set ownership
\&        \-g GRP  Set group ownership
\&        \-m MODE Set permissions
\&        \-t DIR  Install to DIR
.Ve
.IP "\fBiostat\fR" 4
.IX Item "iostat"
iostat [\-c] [\-d] [\-t] [\-z] [\-k|\-m] [ALL|BLOCKDEV...] [\s-1INTERVAL\s0 [\s-1COUNT\s0]]
.Sp
Report \s-1CPU\s0 and I/O statistics
.Sp
.Vb 6
\&        \-c      Show CPU utilization
\&        \-d      Show device utilization
\&        \-t      Print current time
\&        \-z      Omit devices with no activity
\&        \-k      Use kb/s
\&        \-m      Use Mb/s
.Ve
.IP "\fBipcalc\fR" 4
.IX Item "ipcalc"
ipcalc [\-bnmphs] ADDRESS[/PREFIX] [\s-1NETMASK\s0]
.Sp
Calculate and display network settings from \s-1IP\s0 address
.Sp
.Vb 6
\&        \-b      Broadcast address
\&        \-n      Network address
\&        \-m      Default netmask for IP
\&        \-p      Prefix for IP/NETMASK
\&        \-h      Resolved host name
\&        \-s      No error messages
.Ve
.IP "\fBipcrm\fR" 4
.IX Item "ipcrm"
ipcrm [\-MQS key] [\-mqs id]
.Sp
Upper-case options \s-1MQS\s0 remove an object by shmkey value.
Lower-case options remove an object by shmid value.
.Sp
.Vb 3
\&        \-mM     Remove memory segment after last detach
\&        \-qQ     Remove message queue
\&        \-sS     Remove semaphore
.Ve
.IP "\fBipneigh\fR" 4
.IX Item "ipneigh"
ipneigh show|flush [to \s-1PREFIX\s0] [dev \s-1DEV\s0] [nud \s-1STATE\s0]
.IP "\fBkill\fR" 4
.IX Item "kill"
kill [\-l] [\-SIG] \s-1PID...\s0
.Sp
Send a signal (default: \s-1TERM\s0) to given PIDs
.Sp
.Vb 1
\&        \-l      List all signal names and numbers
.Ve
.IP "\fBkillall\fR" 4
.IX Item "killall"
killall [\-lq] [\-SIG] \s-1PROCESS_NAME...\s0
.Sp
Send a signal (default: \s-1TERM\s0) to given processes
.Sp
.Vb 2
\&        \-l      List all signal names and numbers
\&        \-q      Don\*(Aqt complain if no processes were killed
.Ve
.IP "\fBkillall5\fR" 4
.IX Item "killall5"
killall5 [\-l] [\-SIG] [\-o \s-1PID\s0]...
.Sp
Send a signal (default: \s-1TERM\s0) to all processes outside current session
.Sp
.Vb 2
\&        \-l      List all signal names and numbers
\&        \-o PID  Don\*(Aqt signal this PID
.Ve
.IP "\fBless\fR" 4
.IX Item "less"
less [\-EFIMmNSRh~] [\s-1FILE\s0]...
.Sp
View \s-1FILE\s0 (or stdin) one screenful at a time
.Sp
.Vb 9
\&        \-E      Quit once the end of a file is reached
\&        \-F      Quit if entire file fits on first screen
\&        \-I      Ignore case in all searches
\&        \-M,\-m   Display status line with line numbers
\&                and percentage through the file
\&        \-N      Prefix line number to each line
\&        \-S      Truncate long lines
\&        \-R      Remove color escape codes in input
\&        \-~      Suppress ~s displayed past EOF
.Ve
.IP "\fBlink\fR" 4
.IX Item "link"
link \s-1FILE LINK\s0
.Sp
Create hard \s-1LINK\s0 to \s-1FILE\s0
.IP "\fBln\fR" 4
.IX Item "ln"
ln [\-sfnbtv] [\-S \s-1SUF\s0] \s-1TARGET...\s0 LINK|DIR
.Sp
Create a link \s-1LINK\s0 or \s-1DIR/TARGET\s0 to the specified \s-1TARGET\s0(s)
.Sp
.Vb 7
\&        \-s      Make symlinks instead of hardlinks
\&        \-f      Remove existing destinations
\&        \-n      Don\*(Aqt dereference symlinks \- treat like normal file
\&        \-b      Make a backup of the target (if exists) before link operation
\&        \-S SUF  Use suffix instead of ~ when making backup files
\&        \-T      Treat LINK as a file, not DIR
\&        \-v      Verbose
.Ve
.IP "\fBlogger\fR" 4
.IX Item "logger"
logger [\-s] [\-t \s-1TAG\s0] [\-p \s-1PRIO\s0] [\s-1MESSAGE\s0]
.Sp
Write \s-1MESSAGE\s0 (or stdin) to syslog
.Sp
.Vb 3
\&        \-s      Log to stderr as well as the system log
\&        \-t TAG  Log using the specified tag (defaults to user name)
\&        \-p PRIO Priority (number or FACILITY.LEVEL pair)
.Ve
.IP "\fBlogin\fR" 4
.IX Item "login"
login [\-p] [\-h \s-1HOST\s0] [[\-f] \s-1USER\s0]
.Sp
Begin a new session on the system
.Sp
.Vb 3
\&        \-f      Don\*(Aqt authenticate (user already authenticated)
\&        \-h HOST Host user came from (for network logins)
\&        \-p      Preserve environment
.Ve
.Sp
\&\f(CW$LOGIN_TIMEOUT\fR		Seconds (default 60, 0 \- disable)
\&\f(CW$LOGIN_PRE_SUID_SCRIPT\fR	Execute before user \s-1ID\s0 change
.IP "\fBlogname\fR" 4
.IX Item "logname"
logname
.Sp
Print the name of the current user
.IP "\fBlogread\fR" 4
.IX Item "logread"
logread [\-fF]
.Sp
Show messages in syslogd's circular buffer
.Sp
.Vb 2
\&        \-f      Output data as log grows
\&        \-F      Same as \-f, but dump buffer first
.Ve
.IP "\fBlpd\fR" 4
.IX Item "lpd"
lpd \s-1SPOOLDIR\s0 [\s-1HELPER\s0 [\s-1ARGS\s0]]
.Sp
\&\s-1SPOOLDIR\s0 must contain (symlinks to) device nodes or directories
with names matching print queue names. In the first case, jobs are
sent directly to the device. Otherwise each job is stored in queue
directory and \s-1HELPER\s0 program is called. Name of file to print
is passed in \f(CW$DATAFILE\fR variable.
Example:
.Sp
.Vb 1
\&        tcpsvd \-E 0 515 softlimit \-m 999999 lpd /var/spool ./print
.Ve
.IP "\fBlpq\fR" 4
.IX Item "lpq"
lpq [\-P queue[@host[:port]]] [\-U \s-1USERNAME\s0] [\-d \s-1JOBID\s0]... [\-fs]
.Sp
.Vb 4
\&        \-P      lp service to connect to (else uses $PRINTER)
\&        \-d      Delete jobs
\&        \-f      Force any waiting job to be printed
\&        \-s      Short display
.Ve
.IP "\fBlpr\fR" 4
.IX Item "lpr"
lpr \-P queue[@host[:port]] \-U \s-1USERNAME\s0 \-J \s-1TITLE\s0 \-Vmh [\s-1FILE\s0]...
.Sp
.Vb 4
\&        \-P      lp service to connect to (else uses $PRINTER)
\&        \-m      Send mail on completion
\&        \-h      Print banner page too
\&        \-V      Verbose
.Ve
.IP "\fBls\fR" 4
.IX Item "ls"
ls [\-1AaCxdLHRFplinshrSXvctu] [\-w \s-1WIDTH\s0] [\s-1FILE\s0]...
.Sp
List directory contents
.Sp
.Vb 10
\&        \-1      One column output
\&        \-a      Include names starting with .
\&        \-A      Like \-a, but exclude . and ..
\&        \-x      List by lines
\&        \-d      List directory names, not contents
\&        \-L      Follow symlinks
\&        \-H      Follow symlinks on command line
\&        \-R      Recurse
\&        \-p      Append / to directory names
\&        \-F      Append indicator (one of */=@|) to names
\&        \-l      Long format
\&        \-i      List inode numbers
\&        \-n      List numeric UIDs and GIDs instead of names
\&        \-s      List allocated blocks
\&        \-lc     List ctime
\&        \-lu     List atime
\&        \-\-full\-time     List full date/time
\&        \-h      Human readable sizes (1K 243M 2G)
\&        \-\-group\-directories\-first
\&        \-S      Sort by size
\&        \-X      Sort by extension
\&        \-v      Sort by version
\&        \-t      Sort by mtime
\&        \-tc     Sort by ctime
\&        \-tu     Sort by atime
\&        \-r      Reverse sort order
\&        \-w N    Format N columns wide
\&        \-\-color[={always,never,auto}]
.Ve
.IP "\fBlsof\fR" 4
.IX Item "lsof"
lsof
.Sp
Show all open files
.IP "\fBlzcat\fR" 4
.IX Item "lzcat"
lzcat [\s-1FILE\s0]...
.Sp
Decompress to stdout
.IP "\fBlzma\fR" 4
.IX Item "lzma"
lzma \-d [\-cfk] [\s-1FILE\s0]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 5
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP "\fBlzop\fR" 4
.IX Item "lzop"
lzop [\-cfUvd123456789CF] [\s-1FILE\s0]...
.Sp
.Vb 8
\&        \-1..9   Compression level
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-U      Delete input files
\&        \-v      Verbose
\&        \-F      Don\*(Aqt store or verify checksum
\&        \-C      Also write checksum of compressed block
.Ve
.IP "\fBmakemime\fR" 4
.IX Item "makemime"
makemime [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Create multipart MIME-encoded message from FILEs
.Sp
.Vb 5
\&        \-o FILE Output. Default: stdout
\&        \-a HDR  Add header(s). Examples:
\&                "From: user@host.org", "Date: \`date \-R\`"
\&        \-c CT   Content type. Default: application/octet\-stream
\&        \-C CS   Charset. Default: us\-ascii
.Ve
.Sp
Other options are silently ignored
.IP "\fBman\fR" 4
.IX Item "man"
man [\-aw] [\s-1SECTION\s0] MANPAGE[.SECTION]...
.Sp
Display manual page
.Sp
.Vb 2
\&        \-a      Display all pages
\&        \-w      Show page locations
.Ve
.Sp
\&\f(CW$COLUMNS\fR overrides output width
.IP "\fBmd5sum\fR" 4
.IX Item "md5sum"
md5sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1MD5\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBmdev\fR" 4
.IX Item "mdev"
mdev [\-vS] { [\-s] | [\-df] }
.Sp
.Vb 5
\&        \-v      Verbose
\&        \-S      Log to syslog too
\&        \-s      Scan /sys and populate /dev
\&        \-d      Daemon, listen on netlink
\&        \-f      Run in foreground
.Ve
.Sp
Bare mdev is a kernel hotplug helper. To activate it:
	echo /sbin/mdev >/proc/sys/kernel/hotplug
.Sp
It uses /etc/mdev.conf with lines
	[\-][ENV=regex;]...DEVNAME \s-1UID:GID PERM\s0 [>|=PATH]|[!] [@|$|*PROG]
where \s-1DEVNAME\s0 is device name regex, \f(CW@major\fR,minor[\-minor2], or
environment variable regex. A common use of the latter is
to load modules for hotplugged devices:
.Sp
.Vb 1
\&        $MODALIAS=.* 0:0 660 @modprobe "$MODALIAS"
.Ve
.Sp
If /dev/mdev.seq file exists, mdev will wait for its value
to match \f(CW$SEQNUM\fR variable. This prevents plug/unplug races.
To activate this feature, create empty /dev/mdev.seq at boot.
.Sp
If /dev/mdev.log file exists, debug log will be appended to it.
.IP "\fBmesg\fR" 4
.IX Item "mesg"
mesg [y|n]
.Sp
Control write access to your terminal
	y	Allow write access to your terminal
	n	Disallow write access to your terminal
.IP "\fBmim\fR" 4
.IX Item "mim"
mim [\-f \s-1FILE\s0] [\s-1SHELL_OPTIONS\s0] [\s-1TARGET\s0] ...
.Sp
Run a script from a Makefile-like specification file
.Sp
.Vb 1
\&        \-f FILE         Spec file (default Mimfile)
.Ve
.IP "\fBmkdir\fR" 4
.IX Item "mkdir"
mkdir [\-m \s-1MODE\s0] [\-p] \s-1DIRECTORY...\s0
.Sp
Create \s-1DIRECTORY\s0
.Sp
.Vb 2
\&        \-m MODE Mode
\&        \-p      No error if exists; make parent directories as needed
.Ve
.IP "\fBmkdosfs\fR" 4
.IX Item "mkdosfs"
mkdosfs [\-v] [\-n \s-1LABEL\s0] \s-1BLOCKDEV\s0 [\s-1KBYTES\s0]
.Sp
Make a \s-1FAT32\s0 filesystem
.Sp
.Vb 2
\&        \-v      Verbose
\&        \-n LBL  Volume label
.Ve
.IP "\fBmke2fs\fR" 4
.IX Item "mke2fs"
mke2fs [\-Fn] [\-b \s-1BLK_SIZE\s0] [\-i \s-1INODE_RATIO\s0] [\-I \s-1INODE_SIZE\s0] [\-m \s-1RESERVED_PERCENT\s0] [\-L \s-1LABEL\s0] \s-1BLOCKDEV\s0 [\s-1KBYTES\s0]
.Sp
.Vb 7
\&        \-b BLK_SIZE     Block size, bytes
\&        \-F              Force
\&        \-i RATIO        Max number of files is filesystem_size / RATIO
\&        \-I BYTES        Inode size (min 128)
\&        \-L LBL          Volume label
\&        \-m PERCENT      Percent of blocks to reserve for admin
\&        \-n              Dry run
.Ve
.IP "\fBmkfifo\fR" 4
.IX Item "mkfifo"
mkfifo [\-m \s-1MODE\s0] \s-1NAME\s0
.Sp
Create named pipe
.Sp
.Vb 1
\&        \-m MODE Mode (default a=rw)
.Ve
.IP "\fBmknod\fR" 4
.IX Item "mknod"
mknod [\-m \s-1MODE\s0] \s-1NAME TYPE\s0 [\s-1MAJOR MINOR\s0]
.Sp
Create a special file (block, character, or pipe)
.Sp
.Vb 5
\&        \-m MODE Creation mode (default a=rw)
\&TYPE:
\&        b       Block device
\&        c or u  Character device
\&        p       Named pipe (MAJOR MINOR must be omitted)
.Ve
.IP "\fBmkpasswd\fR" 4
.IX Item "mkpasswd"
mkpasswd [\-P \s-1FD\s0] [\-m \s-1TYPE\s0] [\-S \s-1SALT\s0] [\s-1PASSWORD\s0] [\s-1SALT\s0]
.Sp
Print \fBcrypt\fR\|(3) hashed \s-1PASSWORD\s0
.Sp
.Vb 3
\&        \-P N    Read password from fd N
\&        \-m TYPE des,md5,sha256/512 (default des)
\&        \-S SALT
.Ve
.IP "\fBmkswap\fR" 4
.IX Item "mkswap"
mkswap [\-L \s-1LBL\s0] \s-1BLOCKDEV\s0 [\s-1KBYTES\s0]
.Sp
Prepare \s-1BLOCKDEV\s0 to be used as swap partition
.Sp
.Vb 1
\&        \-L LBL  Label
.Ve
.IP "\fBmktemp\fR" 4
.IX Item "mktemp"
mktemp [\-dt] [\-p \s-1DIR\s0] [\s-1TEMPLATE\s0]
.Sp
Create a temporary file with name based on \s-1TEMPLATE\s0 and print its name.
\&\s-1TEMPLATE\s0 must end with \s-1XXXXXX\s0 (e.g. [/dir/]nameXXXXXX).
Without \s-1TEMPLATE,\s0 \-t tmp.XXXXXX is assumed.
.Sp
.Vb 5
\&        \-d      Make directory, not file
\&        \-q      Fail silently on errors
\&        \-t      Prepend base directory name to TEMPLATE
\&        \-p DIR  Use DIR as a base directory (implies \-t)
\&        \-u      Do not create anything; print a name
.Ve
.Sp
Base directory is: \-p \s-1DIR,\s0 else \f(CW$TMPDIR\fR, else /tmp
.IP "\fBmore\fR" 4
.IX Item "more"
more [\s-1FILE\s0]...
.Sp
View \s-1FILE\s0 (or stdin) one screenful at a time
.IP "\fBmount\fR" 4
.IX Item "mount"
mount [\s-1OPTIONS\s0] [\-o \s-1OPT\s0] \s-1DEVICE NODE\s0
.Sp
Mount a filesystem. Filesystem autodetection requires /proc.
.Sp
.Vb 10
\&        \-a              Mount all filesystems in fstab
\&        \-f              Dry run
\&        \-v              Verbose
\&        \-r              Read\-only mount
\&        \-t FSTYPE[,...] Filesystem type(s)
\&        \-T FILE         Read FILE instead of /etc/fstab
\&        \-O OPT          Mount only filesystems with option OPT (\-a only)
\&\-o OPT:
\&        [a]sync         Writes are [a]synchronous
\&        [no]atime       Disable/enable updates to inode access times
\&        [no]diratime    Disable/enable atime updates to directories
\&        [no]relatime    Disable/enable atime updates relative to modification time
\&        [no]dev         (Dis)allow use of special device files
\&        [no]exec        (Dis)allow use of executable files
\&        [no]suid        (Dis)allow set\-user\-id\-root programs
\&        [r]shared       Convert [recursively] to a shared subtree
\&        [r]slave        Convert [recursively] to a slave subtree
\&        [r]private      Convert [recursively] to a private subtree
\&        [un]bindable    Make mount point [un]able to be bind mounted
\&        [r]bind         Bind a file or directory [recursively] to another location
\&        move            Relocate an existing mount point
\&        remount         Remount a mounted filesystem, changing flags
\&        ro              Same as \-r
.Ve
.Sp
There are filesystem-specific \-o flags.
.IP "\fBmpstat\fR" 4
.IX Item "mpstat"
mpstat [\-A] [\-I SUM|CPU|ALL|SCPU] [\-u] [\-P num|ALL] [\s-1INTERVAL\s0 [\s-1COUNT\s0]]
.Sp
Per-processor statistics
.Sp
.Vb 4
\&        \-A                      Same as \-I ALL \-u \-P ALL
\&        \-I SUM|CPU|ALL|SCPU     Report interrupt statistics
\&        \-P num|ALL              Processor to monitor
\&        \-u                      Report CPU utilization
.Ve
.IP "\fBmt\fR" 4
.IX Item "mt"
mt [\-f \s-1DEVICE\s0] \s-1OPCODE VALUE\s0
.Sp
Control magnetic tape drive operation
.Sp
Opcodes:
.Sp
bsf bsfm bsr bss datacompression drvbuffer eof eom erase
fsf fsfm fsr fss load lock mkpart nop offline ras1 ras2
ras3 reset retension rewind rewoffline seek setblk setdensity
setpart tell unload unlock weof wset
.IP "\fBmv\fR" 4
.IX Item "mv"
mv [\-finT] \s-1SOURCE DEST\s0
or: mv [\-fin] \s-1SOURCE...\s0 { \-t \s-1DIRECTORY\s0 | \s-1DIRECTORY\s0 }
.Sp
Rename \s-1SOURCE\s0 to \s-1DEST,\s0 or move SOURCEs to \s-1DIRECTORY\s0
.Sp
.Vb 5
\&        \-f      Don\*(Aqt prompt before overwriting
\&        \-i      Interactive, prompt before overwrite
\&        \-n      Don\*(Aqt overwrite an existing file
\&        \-T      Refuse to move if DEST is a directory
\&        \-t DIR  Move all SOURCEs into DIR
.Ve
.IP "\fBnc\fR" 4
.IX Item "nc"
nc [\-iN] [\-wN] [\-l] [\-p \s-1PORT\s0] [\-f FILE|IPADDR \s-1PORT\s0] [\-e \s-1PROG\s0]
.Sp
Open a pipe to \s-1IP:PORT\s0 or \s-1FILE\s0
.Sp
.Vb 7
\&        \-l      Listen mode, for inbound connects
\&                (use \-ll with \-e for persistent server)
\&        \-p PORT Local port
\&        \-w SEC  Connect timeout
\&        \-i SEC  Delay interval for lines sent
\&        \-f FILE Use file (ala /dev/ttyS0) instead of network
\&        \-e PROG Run PROG after connect
.Ve
.IP "\fBnice\fR" 4
.IX Item "nice"
nice [\-n \s-1ADJUST\s0] [\s-1PROG ARGS\s0]
.Sp
Change scheduling priority, run \s-1PROG\s0
.Sp
.Vb 1
\&        \-n ADJUST       Adjust priority by ADJUST
.Ve
.IP "\fBnl\fR" 4
.IX Item "nl"
nl [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Write FILEs to standard output with line numbers added
.Sp
.Vb 5
\&        \-b STYLE        Which lines to number \- a: all, t: nonempty, n: none
\&        \-i N            Line number increment
\&        \-s STRING       Use STRING as line number separator
\&        \-v N            Start from N
\&        \-w N            Width of line numbers
.Ve
.IP "\fBnmeter\fR" 4
.IX Item "nmeter"
nmeter [\-d \s-1MSEC\s0] \s-1FORMAT_STRING\s0
.Sp
Monitor system in real time
.Sp
.Vb 1
\& \-d MSEC        Milliseconds between updates, default:1000, none:\-1
.Ve
.Sp
Format specifiers:
.Sp
.Vb 10
\& %Nc or %[cN]   CPU. N \- bar size (default 10)
\&                (displays: S:system U:user N:niced D:iowait I:irq i:softirq)
\& %[nINTERFACE]  Network INTERFACE
\& %m             Allocated memory
\& %[md]          Dirty file\-backed memory
\& %[mw]          Memory being written to storage
\& %[mf]          Free memory
\& %[mt]          Total memory
\& %s             Allocated swap
\& %f             Number of used file descriptors
\& %Ni            Total/specific IRQ rate
\& %x             Context switch rate
\& %p             Forks
\& %[pn]          # of processes
\& %b             Block io
\& %Nt            Time (with N decimal points)
\& %NT            Zero\-based timestamp (with N decimal points)
\& %r             Print <cr> instead of <lf> at EOL
.Ve
.IP "\fBnohup\fR" 4
.IX Item "nohup"
nohup \s-1PROG ARGS\s0
.Sp
Run \s-1PROG\s0 immune to hangups, with output to a non-tty
.IP "\fBnologin\fR" 4
.IX Item "nologin"
nologin
.Sp
Politely refuse a login
.IP "\fBnproc\fR" 4
.IX Item "nproc"
nproc [\-\-all] [\-\-ignore=N]
.Sp
Print number of available CPUs
.Sp
.Vb 2
\&        \-\-all           Number of installed CPUs
\&        \-\-ignore=N      Exclude N CPUs
.Ve
.IP "\fBnsenter\fR" 4
.IX Item "nsenter"
nsenter [\s-1OPTIONS\s0] [\s-1PROG ARGS\s0]
.Sp
.Vb 10
\&        \-t PID          Target process to get namespaces from
\&        \-m[FILE]        Enter mount namespace
\&        \-u[FILE]        Enter UTS namespace (hostname etc)
\&        \-i[FILE]        Enter System V IPC namespace
\&        \-n[FILE]        Enter network namespace
\&        \-p[FILE]        Enter pid namespace
\&        \-U[FILE]        Enter user namespace
\&        \-S UID          Set uid in entered namespace
\&        \-G GID          Set gid in entered namespace
\&        \-\-preserve\-credentials  Don\*(Aqt touch uids or gids
\&        \-r[DIR]         Set root directory
\&        \-w[DIR]         Set working directory
\&        \-F              Don\*(Aqt fork before exec\*(Aqing PROG
.Ve
.IP "\fBod\fR" 4
.IX Item "od"
od [\-abcdfhilovxs] [\-t \s-1TYPE\s0] [\-A \s-1RADIX\s0] [\-N \s-1SIZE\s0] [\-j \s-1SKIP\s0] [\-S \s-1MINSTR\s0] [\-w \s-1WIDTH\s0] [\s-1FILE\s0]...
.Sp
Print FILEs (or stdin) unambiguously, as octal bytes by default
.IP "\fBpartprobe\fR" 4
.IX Item "partprobe"
partprobe \s-1DEVICE...\s0
.Sp
Ask kernel to rescan partition table
.IP "\fBpasswd\fR" 4
.IX Item "passwd"
passwd [\-a \s-1ALG\s0] [\-dlu] [\s-1USER\s0]
.Sp
Change \s-1USER\s0's password (default: current user)
.Sp
.Vb 4
\&        \-a ALG  des,md5,sha256/512 (default des)
\&        \-d      Set password to \*(Aq\*(Aq
\&        \-l      Lock (disable) account
\&        \-u      Unlock (enable) account
.Ve
.IP "\fBpaste\fR" 4
.IX Item "paste"
paste [\-d \s-1LIST\s0] [\-s] [\s-1FILE\s0]...
.Sp
Paste lines from each input file, separated with tab
.Sp
.Vb 2
\&        \-d LIST Use delimiters from LIST, not tab
\&        \-s      Serial: one file at a time
.Ve
.IP "\fBpatch\fR" 4
.IX Item "patch"
patch [\-RNE] [\-p N] [\-i \s-1DIFF\s0] [\s-1ORIGFILE\s0 [\s-1PATCHFILE\s0]]
.Sp
.Vb 6
\&        \-p N    Strip N leading components from file names
\&        \-i DIFF Read DIFF instead of stdin
\&        \-R      Reverse patch
\&        \-N      Ignore already applied patches
\&        \-E      Remove output files if they become empty
\&        \-\-dry\-run       Don\*(Aqt actually change files
.Ve
.IP "\fBpgrep\fR" 4
.IX Item "pgrep"
pgrep [\-flanovx] [\-s SID|\-P PPID|PATTERN]
.Sp
Display process(es) selected by regex \s-1PATTERN\s0
.Sp
.Vb 9
\&        \-l      Show command name too
\&        \-a      Show command line too
\&        \-f      Match against entire command line
\&        \-n      Show the newest process only
\&        \-o      Show the oldest process only
\&        \-v      Negate the match
\&        \-x      Match whole name (not substring)
\&        \-s      Match session ID (0 for current)
\&        \-P      Match parent process ID
.Ve
.IP "\fBpidof\fR" 4
.IX Item "pidof"
pidof [\-s] [\-o \s-1PID\s0] [\s-1NAME\s0]...
.Sp
List PIDs of all processes with names that match NAMEs
.Sp
.Vb 3
\&        \-s      Show only one PID
\&        \-o PID  Omit given pid
\&                Use %PPID to omit pid of pidof\*(Aqs parent
.Ve
.IP "\fBpivot_root\fR" 4
.IX Item "pivot_root"
pivot_root \s-1NEW_ROOT PUT_OLD\s0
.Sp
Move the current root file system to \s-1PUT_OLD\s0 and make \s-1NEW_ROOT\s0
the new root file system
.IP "\fBpkill\fR" 4
.IX Item "pkill"
pkill [\-l|\-SIGNAL] [\-xfvnoe] [\-s SID|\-P PPID|PATTERN]
.Sp
Send signal to processes selected by regex \s-1PATTERN\s0
.Sp
.Vb 9
\&        \-l      List all signals
\&        \-x      Match whole name (not substring)
\&        \-f      Match against entire command line
\&        \-s SID  Match session ID (0 for current)
\&        \-P PPID Match parent process ID
\&        \-v      Negate the match
\&        \-n      Signal the newest process only
\&        \-o      Signal the oldest process only
\&        \-e      Display name and PID of the process being killed
.Ve
.IP "\fBpopmaildir\fR" 4
.IX Item "popmaildir"
popmaildir [\s-1OPTIONS\s0] \s-1MAILDIR\s0 [\s-1CONN_HELPER ARGS\s0]
.Sp
Fetch content of remote mailbox to local maildir
.Sp
.Vb 6
\&        \-s              Skip authorization
\&        \-T              Get messages with TOP instead of RETR
\&        \-k              Keep retrieved messages on the server
\&        \-t SEC          Network timeout
\&        \-F \*(AqPROG ARGS\*(Aq  Filter program (may be repeated)
\&        \-M \*(AqPROG ARGS\*(Aq  Delivery program
.Ve
.Sp
Fetch from plain \s-1POP3\s0 server:
popmaildir \-k \s-1DIR\s0 nc pop3.server.com 110 <user_and_pass.txt
Fetch from SSLed \s-1POP3\s0 server and delete fetched emails:
popmaildir \s-1DIR\s0 \*(-- openssl s_client \-quiet \-connect pop3.server.com:995 <user_and_pass.txt
.IP "\fBpoweroff\fR" 4
.IX Item "poweroff"
poweroff [\-d \s-1DELAY\s0] [\-nf]
.Sp
Halt and shut off power
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP "\fBprintenv\fR" 4
.IX Item "printenv"
printenv [\s-1VARIABLE\s0]...
.Sp
Print environment VARIABLEs.
If no \s-1VARIABLE\s0 specified, print all.
.IP "\fBprintf\fR" 4
.IX Item "printf"
printf \s-1FORMAT\s0 [\s-1ARG\s0]...
.Sp
Format and print \s-1ARG\s0(s) according to \s-1FORMAT\s0 (a\-la C printf)
.IP "\fBps\fR" 4
.IX Item "ps"
ps [\-o \s-1COL1\s0,COL2=HEADER]
.Sp
Show list of processes
.Sp
.Vb 1
\&        \-o COL1,COL2=HEADER     Select columns for display
.Ve
.IP "\fBpscan\fR" 4
.IX Item "pscan"
pscan [\-cb] [\-p \s-1MIN_PORT\s0] [\-P \s-1MAX_PORT\s0] [\-t \s-1TIMEOUT\s0] [\-T \s-1MIN_RTT\s0] \s-1HOST\s0
.Sp
Scan \s-1HOST,\s0 print all open ports
.Sp
.Vb 6
\&        \-c      Show closed ports too
\&        \-b      Show blocked ports too
\&        \-p PORT Scan from this port (default 1)
\&        \-P PORT Scan up to this port (default 1024)
\&        \-t MS   Timeout (default 5000 ms)
\&        \-T MS   Minimum rtt (default 5 ms)
.Ve
.IP "\fBpstree\fR" 4
.IX Item "pstree"
pstree [\-p] [PID|USER]
.Sp
Display process tree, optionally start from \s-1USER\s0 or \s-1PID\s0
.Sp
.Vb 1
\&        \-p      Show pids
.Ve
.IP "\fBpwd\fR" 4
.IX Item "pwd"
pwd
.Sp
Print the full filename of the current working directory
.IP "\fBpwdx\fR" 4
.IX Item "pwdx"
pwdx \s-1PID...\s0
.Sp
Show current directory for PIDs
.IP "\fBrdate\fR" 4
.IX Item "rdate"
rdate [\-s/\-p] \s-1HOST\s0
.Sp
Set and print time from \s-1HOST\s0 using \s-1RFC 868\s0
.Sp
.Vb 2
\&        \-s      Only set system time
\&        \-p      Only print time
.Ve
.IP "\fBrdev\fR" 4
.IX Item "rdev"
rdev
.Sp
Print the device node associated with the filesystem mounted at '/'
.IP "\fBreadlink\fR" 4
.IX Item "readlink"
readlink [\-fnv] \s-1FILE\s0
.Sp
Display the value of a symlink
.Sp
.Vb 3
\&        \-f      Canonicalize by following all symlinks
\&        \-n      Don\*(Aqt add newline
\&        \-v      Verbose
.Ve
.IP "\fBreadprofile\fR" 4
.IX Item "readprofile"
readprofile [\s-1OPTIONS\s0]
.Sp
.Vb 10
\&        \-m MAPFILE      (Default: /boot/System.map)
\&        \-p PROFILE      (Default: /proc/profile)
\&        \-M NUM          Set the profiling multiplier to NUM
\&        \-i              Print only info about the sampling step
\&        \-v              Verbose
\&        \-a              Print all symbols, even if count is 0
\&        \-b              Print individual histogram\-bin counts
\&        \-s              Print individual counters within functions
\&        \-r              Reset all the counters (root only)
\&        \-n              Disable byte order auto\-detection
.Ve
.IP "\fBrealpath\fR" 4
.IX Item "realpath"
realpath \s-1FILE...\s0
.Sp
Print absolute pathnames of FILEs
.IP "\fBreboot\fR" 4
.IX Item "reboot"
reboot [\-d \s-1DELAY\s0] [\-nf]
.Sp
Reboot the system
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP "\fBreformime\fR" 4
.IX Item "reformime"
reformime [\s-1OPTIONS\s0]
.Sp
Parse MIME-encoded message on stdin
.Sp
.Vb 3
\&        \-x PREFIX       Extract content of MIME sections to files
\&        \-X PROG ARGS    Filter content of MIME sections through PROG
\&                        Must be the last option
.Ve
.Sp
Other options are silently ignored
.IP "\fBremove-shell\fR" 4
.IX Item "remove-shell"
remove-shell \s-1SHELL...\s0
.Sp
Remove SHELLs from /etc/shells
.IP "\fBrenice\fR" 4
.IX Item "renice"
renice [\-n] \s-1PRIORITY\s0 [[\-p|g|u] \s-1ID...\s0]...
.Sp
Change scheduling priority of a running process
.Sp
.Vb 5
\&        \-n      Add PRIORITY to current nice value
\&                Without \-n, nice value is set to PRIORITY
\&        \-p      Process ids (default)
\&        \-g      Process group ids
\&        \-u      Process user names
.Ve
.IP "\fBreset\fR" 4
.IX Item "reset"
reset
.Sp
Reset terminal (\s-1ESC\s0 codes) and termios (signals, buffering, echo)
.IP "\fBresize\fR" 4
.IX Item "resize"
resize
.Sp
Resize the screen
.IP "\fBresume\fR" 4
.IX Item "resume"
resume \s-1BLOCKDEV\s0 [\s-1OFFSET\s0]
.Sp
Restore system state from 'suspend\-to\-disk' data in \s-1BLOCKDEV\s0
.IP "\fBrev\fR" 4
.IX Item "rev"
rev [\s-1FILE\s0]...
.Sp
Reverse lines of \s-1FILE\s0
.IP "\fBrm\fR" 4
.IX Item "rm"
rm [\-irf] \s-1FILE...\s0
.Sp
Remove (unlink) FILEs
.Sp
.Vb 3
\&        \-i      Always prompt before removing
\&        \-f      Never prompt
\&        \-R,\-r   Recurse
.Ve
.IP "\fBrmdir\fR" 4
.IX Item "rmdir"
rmdir [\-p] \s-1DIRECTORY...\s0
.Sp
Remove \s-1DIRECTORY\s0 if it is empty
.Sp
.Vb 2
\&        \-p      Include parents
\&        \-\-ignore\-fail\-on\-non\-empty
.Ve
.IP "\fBrpm\fR" 4
.IX Item "rpm"
rpm \-i \s-1PACKAGE\s0.rpm; rpm \-qp[ildc] \s-1PACKAGE\s0.rpm
.Sp
Manipulate \s-1RPM\s0 packages
.Sp
Commands:
.Sp
.Vb 6
\&        \-i      Install package
\&        \-qp     Query package
\&        \-qpi    Show information
\&        \-qpl    List contents
\&        \-qpd    List documents
\&        \-qpc    List config files
.Ve
.IP "\fBrpm2cpio\fR" 4
.IX Item "rpm2cpio"
rpm2cpio \s-1PACKAGE\s0.rpm
.Sp
Output a cpio archive of the rpm file
.IP "\fBrun-init\fR" 4
.IX Item "run-init"
run-init [\-d \s-1CAP,CAP...\s0] [\-n] [\-c \s-1CONSOLE_DEV\s0] \s-1NEW_ROOT NEW_INIT\s0 [\s-1ARGS\s0]
.Sp
Free initramfs and switch to another root fs:
.Sp
chroot to \s-1NEW_ROOT,\s0 delete all in /, move \s-1NEW_ROOT\s0 to /,
execute \s-1NEW_INIT. PID\s0 must be 1. \s-1NEW_ROOT\s0 must be a mountpoint.
.Sp
.Vb 3
\&        \-c DEV  Reopen stdio to DEV after switch
\&        \-d CAPS Drop capabilities
\&        \-n      Dry run
.Ve
.IP "\fBrun-parts\fR" 4
.IX Item "run-parts"
run-parts [\-a \s-1ARG\s0]... [\-u \s-1UMASK\s0] [\-\-reverse] [\-\-test] [\-\-exit\-on\-error] [\-\-list] \s-1DIRECTORY\s0
.Sp
Run a bunch of scripts in \s-1DIRECTORY\s0
.Sp
.Vb 6
\&        \-a ARG          Pass ARG as argument to scripts
\&        \-u UMASK        Set UMASK before running scripts
\&        \-\-reverse       Reverse execution order
\&        \-\-test          Dry run
\&        \-\-exit\-on\-error Exit if a script exits with non\-zero
\&        \-\-list          Print names of matching files even if they are not executable
.Ve
.IP "\fBrunsv\fR" 4
.IX Item "runsv"
runsv \s-1DIR\s0
.Sp
Start and monitor a service and optionally an appendant log service
.IP "\fBrunsvdir\fR" 4
.IX Item "runsvdir"
runsvdir [\-P] [\-s \s-1SCRIPT\s0] \s-1DIR\s0
.Sp
Start a runsv process for each subdirectory. If it exits, restart it.
.Sp
.Vb 2
\&        \-P              Put each runsv in a new session
\&        \-s SCRIPT       Run SCRIPT <signo> after signal is processed
.Ve
.IP "\fBscript\fR" 4
.IX Item "script"
script [\-afq] [\-t[\s-1FILE\s0]] [\-c \s-1PROG\s0] [\s-1OUTFILE\s0]
.Sp
Default \s-1OUTFILE\s0 is 'typescript'
.Sp
.Vb 4
\&        \-a      Append output
\&        \-c PROG Run PROG, not shell
\&        \-q      Quiet
\&        \-t[FILE] Send timing to stderr or FILE
.Ve
.IP "\fBscriptreplay\fR" 4
.IX Item "scriptreplay"
scriptreplay \s-1TIMINGFILE\s0 [\s-1TYPESCRIPT\s0 [\s-1DIVISOR\s0]]
.Sp
Play back typescripts, using timing information
.IP "\fBsed\fR" 4
.IX Item "sed"
sed [\-i[\s-1SFX\s0]] [\-nrE] [\-f \s-1FILE\s0]... [\-e \s-1CMD\s0]... [\s-1FILE\s0]...
or: sed [\-i[\s-1SFX\s0]] [\-nrE] \s-1CMD\s0 [\s-1FILE\s0]...
.Sp
.Vb 6
\&        \-e CMD  Add CMD to sed commands to be executed
\&        \-f FILE Add FILE contents to sed commands to be executed
\&        \-i[SFX] Edit files in\-place (otherwise write to stdout)
\&                Optionally back files up, appending SFX
\&        \-n      Suppress automatic printing of pattern space
\&        \-r,\-E   Use extended regex syntax
.Ve
.Sp
If no \-e or \-f, the first non-option argument is the sed command string.
Remaining arguments are input files (stdin if none).
.IP "\fBseedrng\fR" 4
.IX Item "seedrng"
seedrng [\-d \s-1DIR\s0] [\-n]
.Sp
Seed the kernel \s-1RNG\s0 from seed files
.Sp
.Vb 2
\&        \-d DIR  Use seed files in DIR (default: /var/lib/seedrng)
\&        \-n      Do not credit randomness, even if creditable
.Ve
.IP "\fBsendmail\fR" 4
.IX Item "sendmail"
sendmail [\-tv] [\-f \s-1SENDER\s0] [\-amLOGIN 4<user_pass.txt | \-auUSER \-apPASS]
		[\-w \s-1SECS\s0] [\-H '\s-1PROG ARGS\s0' | \-S \s-1HOST\s0] [\s-1RECIPIENT_EMAIL\s0]...
.Sp
Read email from stdin and send it
.Sp
Standard options:
.Sp
.Vb 5
\&        \-t              Read additional recipients from message body
\&        \-f SENDER       For use in MAIL FROM:<sender>. Can be empty string
\&                        Default: \-auUSER, or username of current UID
\&        \-o OPTIONS      Various options. \-oi implied, others are ignored
\&        \-i              \-oi synonym, implied and ignored
.Ve
.Sp
Busybox specific options:
.Sp
.Vb 12
\&        \-v              Verbose
\&        \-w SECS         Network timeout
\&        \-H \*(AqPROG ARGS\*(Aq  Run connection helper. Examples:
\&                openssl s_client \-quiet \-tls1 \-starttls smtp \-connect smtp.gmail.com:25
\&                openssl s_client \-quiet \-tls1 \-connect smtp.gmail.com:465
\&                        $SMTP_ANTISPAM_DELAY: seconds to wait after helper connect
\&        \-S HOST[:PORT]  Server (default $SMTPHOST or 127.0.0.1)
\&        \-amLOGIN        Log in using AUTH LOGIN
\&        \-amPLAIN        or AUTH PLAIN
\&                        (\-amCRAM\-MD5 not supported)
\&        \-auUSER         Username for AUTH
\&        \-apPASS         Password for AUTH
.Ve
.Sp
If no \-a options are given, authentication is not done.
If \-amLOGIN is given but no \-au/\-ap, user/password is read from fd #4.
Other options are silently ignored; \-oi is implied.
Use makemime to create emails with attachments.
.IP "\fBseq\fR" 4
.IX Item "seq"
seq [\-w] [\-s \s-1SEP\s0] [\s-1FIRST\s0 [\s-1INC\s0]] \s-1LAST\s0
.Sp
Print numbers from \s-1FIRST\s0 to \s-1LAST,\s0 in steps of \s-1INC.
FIRST, INC\s0 default to 1.
.Sp
.Vb 2
\&        \-w      Pad to last with leading zeros
\&        \-s SEP  String separator
.Ve
.IP "\fBsetfattr\fR" 4
.IX Item "setfattr"
setfattr [\-h] \-n|\-x \s-1ATTR\s0 [\-v \s-1VALUE\s0] \s-1FILE...\s0
.Sp
Set extended attributes
.Sp
.Vb 4
\&        \-h              Do not follow symlinks
\&        \-x ATTR         Remove attribute ATTR
\&        \-n ATTR         Set attribute ATTR to VALUE
\&        \-v VALUE        (default: empty)
.Ve
.IP "\fBsetpriv\fR" 4
.IX Item "setpriv"
setpriv [\s-1OPTIONS\s0] \s-1PROG ARGS\s0
.Sp
Run \s-1PROG\s0 with different privilege settings
.Sp
\&\-d,\-\-dump		Show current capabilities
\&\-\-nnp,\-\-no\-new\-privs	Ignore setuid/setgid bits and file capabilities
\&\-\-inh\-caps \s-1CAP,CAP\s0	Set inheritable capabilities
\&\-\-ambient\-caps \s-1CAP,CAP\s0	Set ambient capabilities
.IP "\fBsetsid\fR" 4
.IX Item "setsid"
setsid [\-c] \s-1PROG ARGS\s0
.Sp
Run \s-1PROG\s0 in a new session. \s-1PROG\s0 will have no controlling terminal
and will not be affected by keyboard signals (^C etc).
.Sp
.Vb 1
\&        \-c      Set controlling terminal to stdin
.Ve
.IP "\fBsetuidgid\fR" 4
.IX Item "setuidgid"
setuidgid \s-1USER PROG ARGS\s0
.Sp
Set uid and gid to \s-1USER\s0's uid and gid, drop supplementary group ids,
run \s-1PROG\s0
.IP "\fBsh\fR" 4
.IX Item "sh"
sh [\-il] [\-|+Cabefmnuvx] [\-|+o \s-1OPT\s0]... [\-c '\s-1SCRIPT\s0' [\s-1ARG0 ARGS\s0] | \s-1FILE ARGS\s0 | \-s \s-1ARGS\s0]
.Sp
Unix shell interpreter
.IP "\fBsha1sum\fR" 4
.IX Item "sha1sum"
sha1sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1SHA1\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBsha256sum\fR" 4
.IX Item "sha256sum"
sha256sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1SHA256\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBsha3sum\fR" 4
.IX Item "sha3sum"
sha3sum [\-c[sw]] [\-a \s-1BITS\s0] [\s-1FILE\s0]...
.Sp
Print or check \s-1SHA3\s0 checksums
.Sp
.Vb 4
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
\&        \-a BITS 224 (default), 256, 384, 512
.Ve
.IP "\fBsha512sum\fR" 4
.IX Item "sha512sum"
sha512sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1SHA512\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBshred\fR" 4
.IX Item "shred"
shred [\-fuz] [\-n N] [\-s \s-1SIZE\s0] \s-1FILE...\s0
.Sp
Overwrite/delete FILEs
.Sp
.Vb 5
\&        \-f      Chmod to ensure writability
\&        \-s SIZE Size to write
\&        \-n N    Overwrite N times (default 3)
\&        \-z      Final overwrite with zeros
\&        \-u      Remove file
.Ve
.IP "\fBshuf\fR" 4
.IX Item "shuf"
shuf [\-n \s-1NUM\s0] [\-o \s-1FILE\s0] [\-z] [\s-1FILE\s0 | \-e [\s-1ARG...\s0] | \-i L\-H]
.Sp
Randomly permute lines
.Sp
.Vb 5
\&        \-n NUM  Output at most NUM lines
\&        \-o FILE Write to FILE, not standard output
\&        \-z      NUL terminated output
\&        \-e      Treat ARGs as lines
\&        \-i L\-H  Treat numbers L\-H as lines
.Ve
.IP "\fBsleep\fR" 4
.IX Item "sleep"
sleep [N]...
.Sp
Pause for a time equal to the total of the args given, where each arg can
have an optional suffix of (s)econds, (m)inutes, (h)ours, or (d)ays
.IP "\fBsmemcap\fR" 4
.IX Item "smemcap"
smemcap >\s-1SMEMDATA.TAR\s0
.Sp
Collect memory usage data in /proc and write it to stdout
.IP "\fBsoftlimit\fR" 4
.IX Item "softlimit"
softlimit [\-a \s-1BYTES\s0] [\-m \s-1BYTES\s0] [\-d \s-1BYTES\s0] [\-s \s-1BYTES\s0] [\-l \s-1BYTES\s0]
	[\-f \s-1BYTES\s0] [\-c \s-1BYTES\s0] [\-r \s-1BYTES\s0] [\-o N] [\-p N] [\-t N]
	\s-1PROG ARGS\s0
.Sp
Set soft resource limits, then run \s-1PROG\s0
.Sp
.Vb 8
\&        \-a BYTES        Limit total size of all segments
\&        \-m BYTES        Same as \-d BYTES \-s BYTES \-l BYTES \-a BYTES
\&        \-d BYTES        Limit data segment
\&        \-s BYTES        Limit stack segment
\&        \-l BYTES        Limit locked memory size
\&        \-o N            Limit number of open files per process
\&        \-p N            Limit number of processes per uid
\&Options controlling file sizes:
\&
\&        \-f BYTES        Limit output file sizes
\&        \-c BYTES        Limit core file size
\&Efficiency opts:
\&
\&        \-r BYTES        Limit resident set size
\&        \-t N            Limit CPU time, process receives
\&                        a SIGXCPU after N seconds
.Ve
.IP "\fBsort\fR" 4
.IX Item "sort"
sort [\-nrughMcszbdfiokt] [\-o \s-1FILE\s0] [\-k START[.OFS][\s-1OPTS\s0][,END[.OFS][\s-1OPTS\s0]] [\-t \s-1CHAR\s0] [\s-1FILE\s0]...
.Sp
Sort lines of text
.Sp
.Vb 10
\&        \-o FILE Output to FILE
\&        \-c      Check whether input is sorted
\&        \-b      Ignore leading blanks
\&        \-f      Ignore case
\&        \-i      Ignore unprintable characters
\&        \-d      Dictionary order (blank or alphanumeric only)
\&        \-n      Sort numbers
\&        \-g      General numerical sort
\&        \-h      Sort human readable numbers (2K 1G)
\&        \-M      Sort month
\&        \-V      Sort version
\&        \-t CHAR Field separator
\&        \-k N[,M] Sort by Nth field
\&        \-r      Reverse sort order
\&        \-s      Stable (don\*(Aqt sort ties alphabetically)
\&        \-u      Suppress duplicate lines
\&        \-z      NUL terminated input and output
.Ve
.IP "\fBsplit\fR" 4
.IX Item "split"
split [\s-1OPTIONS\s0] [\s-1INPUT\s0 [\s-1PREFIX\s0]]
.Sp
.Vb 3
\&        \-b N[k|m]       Split by N (kilo|mega)bytes
\&        \-l N            Split by N lines
\&        \-a N            Use N letters as suffix
.Ve
.IP "\fBssl_client\fR" 4
.IX Item "ssl_client"
ssl_client [\-e] \-s \s-1FD\s0 [\-r \s-1FD\s0] [\-n \s-1SNI\s0]
.IP "\fBstart-stop-daemon\fR" 4
.IX Item "start-stop-daemon"
start-stop-daemon [\s-1OPTIONS\s0] [\-S|\-K] ... [\-\- \s-1ARGS...\s0]
.Sp
Search for matching processes, and then
\&\-K: stop all matching processes
\&\-S: start a process unless a matching process is found
.Sp
Process matching:
.Sp
.Vb 10
\&        \-u USERNAME|UID Match only this user\*(Aqs processes
\&        \-n NAME         Match processes with NAME
\&                        in comm field in /proc/PID/stat
\&        \-x EXECUTABLE   Match processes with this command
\&                        in /proc/PID/cmdline
\&        \-p FILE         Match a process with PID from FILE
\&        All specified conditions must match
\&\-S only:
\&        \-x EXECUTABLE   Program to run
\&        \-a NAME         Zeroth argument
\&        \-b              Background
\&        \-N N            Change nice level
\&        \-c USER[:[GRP]] Change user/group
\&        \-m              Write PID to pidfile specified by \-p
\&\-K only:
\&        \-s SIG          Signal to send
\&        \-t              Match only, exit with 0 if found
\&Other:
\&
\&        \-o              Exit with status 0 if nothing is done
\&        \-v              Verbose
\&        \-q              Quiet
.Ve
.IP "\fBstrings\fR" 4
.IX Item "strings"
strings [\-fo] [\-t o|d|x] [\-n \s-1LEN\s0] [\s-1FILE\s0]...
.Sp
Display printable strings in a binary file
.Sp
.Vb 4
\&        \-f              Precede strings with filenames
\&        \-o              Precede strings with octal offsets
\&        \-t o|d|x        Precede strings with offsets in base 8/10/16
\&        \-n LEN          At least LEN characters form a string (default 4)
.Ve
.IP "\fBstty\fR" 4
.IX Item "stty"
stty [\-a|g] [\-F \s-1DEVICE\s0] [\s-1SETTING\s0]...
.Sp
Without arguments, prints baud rate, line discipline,
and deviations from stty sane
.Sp
.Vb 4
\&        \-F DEVICE       Open device instead of stdin
\&        \-a              Print all current settings in human\-readable form
\&        \-g              Print in stty\-readable form
\&        [SETTING]       See manpage
.Ve
.IP "\fBsu\fR" 4
.IX Item "su"
su [\-lmp] [\-s \s-1SH\s0] [\-] [\s-1USER\s0 [\s-1FILE ARGS\s0 | \-c '\s-1CMD\s0' [\s-1ARG0 ARGS\s0]]]
.Sp
Run shell under \s-1USER\s0 (by default, root)
.Sp
.Vb 4
\&        \-,\-l    Clear environment, go to home dir, run shell as login shell
\&        \-p,\-m   Do not set new $HOME, $SHELL, $USER, $LOGNAME
\&        \-c CMD  Command to pass to \*(Aqsh \-c\*(Aq
\&        \-s SH   Shell to use instead of user\*(Aqs default
.Ve
.IP "\fBsulogin\fR" 4
.IX Item "sulogin"
sulogin [\-t N] [\s-1TTY\s0]
.Sp
Single user login
.Sp
.Vb 2
\&        \-p      Start a login shell
\&        \-t SEC  Timeout
.Ve
.IP "\fBsum\fR" 4
.IX Item "sum"
sum [\-rs] [\s-1FILE\s0]...
.Sp
Checksum and count the blocks in a file
.Sp
.Vb 2
\&        \-r      Use BSD sum algorithm (1K blocks)
\&        \-s      Use System V sum algorithm (512byte blocks)
.Ve
.IP "\fBsv\fR" 4
.IX Item "sv"
sv [\-v] [\-w \s-1SEC\s0] \s-1CMD SERVICE_DIR...\s0
.Sp
Control services monitored by runsv supervisor.
Commands (only first character is enough):
.Sp
status: query service status
up: if service isn't running, start it. If service stops, restart it
once: like 'up', but if service stops, don't restart it
down: send \s-1TERM\s0 and \s-1CONT\s0 signals. If ./run exits, start ./finish
	if it exists. After it stops, don't restart service
exit: send \s-1TERM\s0 and \s-1CONT\s0 signals to service and log service. If they exit,
	runsv exits too
pause, cont, hup, alarm, interrupt, quit, 1, 2, term, kill: send
\&\s-1STOP, CONT, HUP, ALRM, INT, QUIT, USR1, USR2, TERM, KILL\s0 signal to service
.IP "\fBsvc\fR" 4
.IX Item "svc"
svc [\-udopchaitkx] \s-1SERVICE_DIR...\s0
.Sp
Control services monitored by runsv supervisor
.Sp
.Vb 5
\&        \-u      If service is not running, start it; restart if it stops
\&        \-d      If service is running, send TERM+CONT signals; do not restart it
\&        \-o      Once: if service is not running, start it; do not restart it
\&        \-pchaitk Send STOP, CONT, HUP, ALRM, INT, TERM, KILL signal to service
\&        \-x      Exit: runsv will exit as soon as the service is down
.Ve
.IP "\fBsvlogd\fR" 4
.IX Item "svlogd"
svlogd [\-tttv] [\-r C] [\-R \s-1CHARS\s0] [\-l \s-1MATCHLEN\s0] [\-b \s-1BUFLEN\s0] \s-1DIR...\s0
.Sp
Read log data from stdin and write to rotated log files in DIRs
.Sp
.Vb 6
\&        \-r C    Replace non\-printable characters with C
\&        \-R CHARS Also replace CHARS with C (default _)
\&        \-t      Timestamp with @tai64n
\&        \-tt     Timestamp with yyyy\-mm\-dd_hh:mm:ss.sssss
\&        \-ttt    Timestamp with yyyy\-mm\-ddThh:mm:ss.sssss
\&        \-v      Verbose
.Ve
.Sp
DIR/config file modifies behavior:
sSIZE \- when to rotate logs (default 1000000, 0 disables)
nNUM \- number of files to retain
!PROG \- process rotated log with \s-1PROG
+,\-PATTERN\s0 \- (de)select line for logging
E,ePATTERN \- (de)select line for stderr
.IP "\fBsvok\fR" 4
.IX Item "svok"
svok \s-1SERVICE_DIR\s0
.Sp
Check whether runsv supervisor is running.
Exit code is 0 if it does, 100 if it does not,
111 (with error message) if \s-1SERVICE_DIR\s0 does not exist.
.IP "\fBswapoff\fR" 4
.IX Item "swapoff"
swapoff [\-a] [\s-1DEVICE\s0]
.Sp
Stop swapping on \s-1DEVICE\s0
.Sp
.Vb 1
\&        \-a      Stop swapping on all swap devices
.Ve
.IP "\fBswapon\fR" 4
.IX Item "swapon"
swapon [\-a] [\-e] [\-d[\s-1POL\s0]] [\s-1DEVICE\s0]
.Sp
Start swapping on \s-1DEVICE\s0
.Sp
.Vb 4
\&        \-a      Start swapping on all swap devices
\&        \-d[POL] Discard blocks at swapon (POL=once),
\&                as freed (POL=pages), or both (POL omitted)
\&        \-e      Silently skip devices that do not exist
.Ve
.IP "\fBsync\fR" 4
.IX Item "sync"
sync [\-df] [\s-1FILE\s0]...
.Sp
Write all buffered blocks (in FILEs) to disk
	\-d	Avoid syncing metadata
	\-f	Sync filesystems underlying FILEs
.IP "\fBsysctl\fR" 4
.IX Item "sysctl"
sysctl [\-enq] { \-a | \-p [\s-1FILE\s0]... | [\-w] [KEY[=VALUE]]... }
.Sp
Show/set kernel parameters
.Sp
.Vb 6
\&        \-e      Don\*(Aqt warn about unknown keys
\&        \-n      Don\*(Aqt show key names
\&        \-q      Quiet
\&        \-a      Show all values
\&        \-p      Set values from FILEs (default /etc/sysctl.conf)
\&        \-w      Set values
.Ve
.IP "\fBsyslogd\fR" 4
.IX Item "syslogd"
syslogd [\s-1OPTIONS\s0]
.Sp
System logging utility
.Sp
.Vb 10
\&        \-n              Run in foreground
\&        \-R HOST[:PORT]  Log to HOST:PORT (default PORT:514)
\&        \-L              Log locally and via network (default is network only if \-R)
\&        \-C[size_kb]     Log to shared mem buffer (use logread to read it)
\&        \-K              Log to kernel printk buffer (use dmesg to read it)
\&        \-O FILE         Log to FILE (default: /var/log/messages, stdout if \-)
\&        \-s SIZE         Max size (KB) before rotation (default 200KB, 0=off)
\&        \-b N            N rotated logs to keep (default 1, max 99, 0=purge)
\&        \-l N            Log only messages more urgent than prio N (1\-8)
\&        \-S              Smaller output
\&        \-t              Strip client\-generated timestamps
\&        \-D              Drop duplicates
\&        \-f FILE         Use FILE as config (default:/etc/syslog.conf)
.Ve
.IP "\fBtac\fR" 4
.IX Item "tac"
tac [\s-1FILE\s0]...
.Sp
Concatenate FILEs and print them in reverse
.IP "\fBtail\fR" 4
.IX Item "tail"
tail [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print last 10 lines of FILEs (or stdin) to.
With more than one \s-1FILE,\s0 precede each with a filename header.
.Sp
.Vb 9
\&        \-c [+]N[bkm]    Print last N bytes
\&        \-n N[bkm]       Print last N lines
\&        \-n +N[bkm]      Start on Nth line and print the rest
\&                        (b:*512 k:*1024 m:*1024^2)
\&        \-q              Never print headers
\&        \-v              Always print headers
\&        \-f              Print data as file grows
\&        \-F              Same as \-f, but keep retrying
\&        \-s SECONDS      Wait SECONDS between reads with \-f
.Ve
.IP "\fBtar\fR" 4
.IX Item "tar"
tar c|x|t [\-zJjahmvokO] [\-f \s-1TARFILE\s0] [\-C \s-1DIR\s0] [\-T \s-1FILE\s0] [\-X \s-1FILE\s0] [\s-1LONGOPT\s0]... [\s-1FILE\s0]...
.Sp
Create, extract, or list files from a tar file
.Sp
.Vb 10
\&        c       Create
\&        x       Extract
\&        t       List
\&        \-f FILE Name of TARFILE (\*(Aq\-\*(Aq for stdin/out)
\&        \-C DIR  Change to DIR before operation
\&        \-v      Verbose
\&        \-O      Extract to stdout
\&        \-m      Don\*(Aqt restore mtime
\&        \-o      Don\*(Aqt restore user:group
\&        \-k      Don\*(Aqt replace existing files
\&        \-z      (De)compress using gzip
\&        \-J      (De)compress using xz
\&        \-j      (De)compress using bzip2
\&        \-\-lzma  (De)compress using lzma
\&        \-a      (De)compress based on extension
\&        \-h      Follow symlinks
\&        \-T FILE File with names to include
\&        \-X FILE File with glob patterns to exclude
\&        \-\-exclude PATTERN       Glob pattern to exclude
\&        \-\-overwrite             Replace existing files
\&        \-\-strip\-components NUM  NUM of leading components to strip
\&        \-\-no\-recursion          Don\*(Aqt descend in directories
\&        \-\-numeric\-owner         Use numeric user:group
\&        \-\-no\-same\-permissions   Don\*(Aqt restore access permissions
\&        \-\-to\-command COMMAND    Pipe files to COMMAND
.Ve
.IP "\fBtc\fR" 4
.IX Item "tc"
tc \s-1OBJECT CMD\s0 [dev \s-1STRING\s0]
.Sp
\&\s-1OBJECT:\s0 qdisc|class|filter
\&\s-1CMD:\s0 add|del|change|replace|show
.Sp
qdisc [handle \s-1QHANDLE\s0] [root|ingress|parent \s-1CLASSID\s0]
	[[\s-1QDISC_KIND\s0] [help|OPTIONS]]
	\s-1QDISC_KIND\s0 := [p|b]fifo|tbf|prio|cbq|red|etc.
qdisc show [dev \s-1STRING\s0] [ingress]
class [classid \s-1CLASSID\s0] [root|parent \s-1CLASSID\s0]
	[[\s-1QDISC_KIND\s0] [help|OPTIONS] ]
class show [ dev \s-1STRING\s0 ] [root|parent \s-1CLASSID\s0]
filter [pref \s-1PRIO\s0] [protocol \s-1PROTO\s0]
	[root|classid \s-1CLASSID\s0] [handle \s-1FILTERID\s0]
	[[\s-1FILTER_TYPE\s0] [help|OPTIONS]]
filter show [dev \s-1STRING\s0] [root|parent \s-1CLASSID\s0]
.IP "\fBtcpsvd\fR" 4
.IX Item "tcpsvd"
tcpsvd [\-hEv] [\-c N] [\-C N[:MSG]] [\-b N] [\-u \s-1USER\s0] [\-l \s-1NAME\s0] \s-1IP PORT PROG\s0
.Sp
Create \s-1TCP\s0 socket, bind to \s-1IP:PORT\s0 and listen for incoming connections.
Run \s-1PROG\s0 for each connection.
.Sp
.Vb 12
\&        IP PORT         IP:PORT to listen on
\&        PROG ARGS       Program to run
\&        \-u USER[:GRP]   Change to user/group after bind
\&        \-c N            Up to N connections simultaneously (default 30)
\&        \-b N            Allow backlog of approximately N TCP SYNs (default 20)
\&        \-C N[:MSG]      Allow only up to N connections from the same IP:
\&                        new connections from this IP address are closed
\&                        immediately, MSG is written to the peer before close
\&        \-E              Don\*(Aqt set up environment
\&        \-h              Look up peer\*(Aqs hostname
\&        \-l NAME         Local hostname (else look up local hostname in DNS)
\&        \-v              Verbose
.Ve
.Sp
Environment if no \-E:
PROTO='\s-1TCP\s0'
TCPREMOTEADDR='ip:port' ('[ip]:port' for IPv6)
TCPLOCALADDR='ip:port'
TCPORIGDSTADDR='ip:port' of destination before firewall
	Useful for REDIRECTed-to-local connections:
	iptables \-t nat \-A \s-1PREROUTING\s0 \-p tcp \-\-dport 80 \-j \s-1REDIRECT\s0 \-\-to 8080
TCPCONCURRENCY=num_of_connects_from_this_ip
If \-h:
TCPLOCALHOST='hostname' (\-l \s-1NAME\s0 is used if specified)
TCPREMOTEHOST='hostname'
.IP "\fBtee\fR" 4
.IX Item "tee"
tee [\-ai] [\s-1FILE\s0]...
.Sp
Copy stdin to each \s-1FILE,\s0 and also to stdout
.Sp
.Vb 2
\&        \-a      Append to the given FILEs, don\*(Aqt overwrite
\&        \-i      Ignore interrupt signals (SIGINT)
.Ve
.IP "\fBtelnet\fR" 4
.IX Item "telnet"
telnet [\-a] [\-l \s-1USER\s0] \s-1HOST\s0 [\s-1PORT\s0]
.Sp
Connect to telnet server
.Sp
.Vb 2
\&        \-a      Automatic login with $USER variable
\&        \-l USER Automatic login as USER
.Ve
.IP "\fBtelnetd\fR" 4
.IX Item "telnetd"
telnetd [\s-1OPTIONS\s0]
.Sp
Handle incoming telnet connections
.Sp
.Vb 11
\&        \-l LOGIN        Exec LOGIN on connect
\&        \-f ISSUE_FILE   Display ISSUE_FILE instead of /etc/issue
\&        \-K              Close connection as soon as login exits
\&                        (normally wait until all programs close slave pty)
\&        \-p PORT         Port to listen on. Default 23
\&        \-b ADDR[:PORT]  Address to bind to
\&        \-F              Run in foreground
\&        \-i              Inetd mode
\&        \-w SEC          Inetd \*(Aqwait\*(Aq mode, linger time SEC
\&                inetd.conf line: 23 stream tcp wait root telnetd telnetd \-w10
\&        \-S              Log to syslog (implied by \-i or without \-F and \-w)
.Ve
.IP "\fBtftp\fR" 4
.IX Item "tftp"
tftp [\s-1OPTIONS\s0] \s-1HOST\s0 [\s-1PORT\s0]
.Sp
Transfer a file from/to tftp server
.Sp
.Vb 5
\&        \-l FILE Local FILE
\&        \-r FILE Remote FILE
\&        \-g      Get file
\&        \-p      Put file
\&        \-b SIZE Transfer blocks in bytes
.Ve
.IP "\fBtftpd\fR" 4
.IX Item "tftpd"
tftpd [\-crl] [\-u \s-1USER\s0] [\s-1DIR\s0]
.Sp
Transfer a file on tftp client's request
.Sp
tftpd is an inetd service, inetd.conf line:
	69 dgram udp nowait root tftpd tftpd \-l /files/to/serve
Can be run from udpsvd:
.Sp
.Vb 1
\&        udpsvd \-vE 0.0.0.0 69 tftpd /files/to/serve
\&
\&        \-r      Prohibit upload
\&        \-c      Allow file creation via upload
\&        \-u USER Access files as USER
\&        \-l      Log to syslog (inetd mode requires this)
.Ve
.IP "\fBtime\fR" 4
.IX Item "time"
time [\-vpa] [\-o \s-1FILE\s0] \s-1PROG ARGS\s0
.Sp
Run \s-1PROG,\s0 display resource usage when it exits
.Sp
.Vb 5
\&        \-v      Verbose
\&        \-p      POSIX output format
\&        \-f FMT  Custom format
\&        \-o FILE Write result to FILE
\&        \-a      Append (else overwrite)
.Ve
.IP "\fBtimeout\fR" 4
.IX Item "timeout"
timeout [\-s \s-1SIG\s0] [\-k \s-1KILL_SECS\s0] \s-1SECS PROG ARGS\s0
.Sp
Run \s-1PROG.\s0 Send \s-1SIG\s0 to it if it is not gone in \s-1SECS\s0 seconds.
Default \s-1SIG: TERM\s0.If it still exists in \s-1KILL_SECS\s0 seconds, send \s-1KILL.\s0
.IP "\fBtop\fR" 4
.IX Item "top"
top [\-bm] [\-n \s-1COUNT\s0] [\-d \s-1SECONDS\s0]
.Sp
Show a view of process activity in real time.
Read the status of all processes from /proc each \s-1SECONDS\s0
and show a screenful of them.
Keys:
.Sp
.Vb 6
\&        N/M/P/T: show CPU usage, sort by pid/mem/cpu/time
\&        S: show memory
\&        R: reverse sort
\&        1: toggle SMP
\&        Q,^C: exit
\&Options:
\&
\&        \-b      Batch mode
\&        \-n N    Exit after N iterations
\&        \-d SEC  Delay between updates
\&        \-m      Same as \*(Aqs\*(Aq key
.Ve
.IP "\fBtouch\fR" 4
.IX Item "touch"
touch [\-cham] [\-d \s-1DATE\s0] [\-t \s-1DATE\s0] [\-r \s-1FILE\s0] \s-1FILE...\s0
.Sp
Update mtime of FILEs
.Sp
.Vb 7
\&        \-c      Don\*(Aqt create files
\&        \-h      Don\*(Aqt follow links
\&        \-a      Change only atime
\&        \-m      Change only mtime
\&        \-d DT   Date/time to use
\&        \-t DT   Date/time to use
\&        \-r FILE Use FILE\*(Aqs date/time
.Ve
.IP "\fBtr\fR" 4
.IX Item "tr"
tr [\-cds] \s-1STRING1\s0 [\s-1STRING2\s0]
.Sp
Translate, squeeze, or delete characters from stdin, writing to stdout
.Sp
.Vb 3
\&        \-c      Take complement of STRING1
\&        \-d      Delete input characters coded STRING1
\&        \-s      Squeeze multiple output characters of STRING2 into one character
.Ve
.IP "\fBtruncate\fR" 4
.IX Item "truncate"
truncate [\-c] \-s \s-1SIZE FILE...\s0
.Sp
Truncate FILEs to \s-1SIZE\s0
.Sp
.Vb 2
\&        \-c      Do not create files
\&        \-s SIZE
.Ve
.IP "\fBts\fR" 4
.IX Item "ts"
ts [\-is] [\s-1STRFTIME\s0]
.Sp
Pipe stdin to stdout, add timestamp to each line
.Sp
.Vb 2
\&        \-s      Time since start
\&        \-i      Time since previous line
.Ve
.IP "\fBtsort\fR" 4
.IX Item "tsort"
tsort [\s-1FILE\s0]
.Sp
Topological sort
.IP "\fBtty\fR" 4
.IX Item "tty"
tty [\-s]
.Sp
Print file name of stdin's terminal
.Sp
.Vb 1
\&        \-s      Print nothing, only return exit status
.Ve
.IP "\fBttysize\fR" 4
.IX Item "ttysize"
ttysize [w] [h]
.Sp
Print dimensions of stdin tty, or 80x24
.IP "\fBubirename\fR" 4
.IX Item "ubirename"
ubirename \s-1UBI_DEVICE OLD_VOLNAME NEW_VOLNAME\s0 [\s-1OLD2 NEW2\s0]...
.Sp
Rename \s-1UBI\s0 volumes on \s-1UBI_DEVICE\s0
.IP "\fBudhcpc6\fR" 4
.IX Item "udhcpc6"
udhcpc6 [\-fbqR] [\-t N] [\-T \s-1SEC\s0] [\-A SEC|\-n] [\-i \s-1IFACE\s0] [\-s \s-1PROG\s0]
	[\-p \s-1PIDFILE\s0] [\-ldo] [\-r IPv6] [\-x \s-1OPT:VAL\s0]... [\-O \s-1OPT\s0]...
.Sp
.Vb 10
\&        \-i IFACE        Interface to use (default eth0)
\&        \-p FILE         Create pidfile
\&        \-s PROG         Run PROG at DHCP events (default /usr/share/udhcpc/default6.script)
\&        \-B              Request broadcast replies
\&        \-t N            Send up to N discover packets
\&        \-T SEC          Pause between packets (default 3)
\&        \-A SEC          Wait if lease is not obtained (default 20)
\&        \-b              Background if lease is not obtained
\&        \-n              Exit if lease is not obtained
\&        \-q              Exit after obtaining lease
\&        \-R              Release IP on exit
\&        \-f              Run in foreground
\&        \-S              Log to syslog too
\&        \-l              Send \*(Aqinformation request\*(Aq instead of \*(Aqsolicit\*(Aq
\&                        (used for servers which do not assign IPv6 addresses)
\&        \-r IPv6         Request this address (\*(Aqno\*(Aq to not request any IP)
\&        \-d              Request prefix
\&        \-o              Don\*(Aqt request any options (unless \-O is given)
\&        \-O OPT          Request option OPT from server (cumulative)
\&        \-x OPT:VAL      Include option OPT in sent packets (cumulative)
\&                        Examples of string, numeric, and hex byte opts:
\&                        \-x hostname:bbox \- option 12
\&                        \-x lease:3600 \- option 51 (lease time)
\&                        \-x 0x3d:0100BEEFC0FFEE \- option 61 (client id)
\&                        \-x 14:\*(Aq"dumpfile"\*(Aq \- option 14 (shell\-quoted)
\&Signals:
\&
\&        USR1    Renew lease
\&        USR2    Release lease
.Ve
.IP "\fBudpsvd\fR" 4
.IX Item "udpsvd"
udpsvd [\-hEv] [\-c N] [\-u \s-1USER\s0] [\-l \s-1NAME\s0] \s-1IP PORT PROG\s0
.Sp
Create \s-1UDP\s0 socket, bind to \s-1IP:PORT\s0 and wait for incoming packets.
Run \s-1PROG\s0 for each packet, redirecting all further packets with same
peer ip:port to it.
.Sp
.Vb 8
\&        IP PORT         IP:PORT to listen on
\&        PROG ARGS       Program to run
\&        \-u USER[:GRP]   Change to user/group after bind
\&        \-c N            Up to N connections simultaneously (default 30)
\&        \-E              Don\*(Aqt set up environment
\&        \-h              Look up peer\*(Aqs hostname
\&        \-l NAME         Local hostname (else look up local hostname in DNS)
\&        \-v              Verbose
.Ve
.Sp
Environment if no \-E:
PROTO='\s-1UDP\s0'
UDPREMOTEADDR='ip:port' ('[ip]:port' for IPv6)
UDPLOCALADDR='ip:port'
If \-h:
UDPLOCALHOST='hostname' (\-l \s-1NAME\s0 is used if specified)
UDPREMOTEHOST='hostname'
.IP "\fBuevent\fR" 4
.IX Item "uevent"
uevent [\s-1PROG ARGS\s0]
.Sp
uevent runs \s-1PROG\s0 for every netlink notification.
\&\s-1PROG\s0's environment contains data passed from the kernel.
Typical usage (daemon for dynamic device node creation):
	# uevent mdev & mdev \-s
.IP "\fBuname\fR" 4
.IX Item "uname"
uname [\-amnrspvio]
.Sp
Print system information
.Sp
.Vb 9
\&        \-a      Print all
\&        \-m      Machine (hardware) type
\&        \-n      Hostname
\&        \-r      Kernel release
\&        \-s      Kernel name (default)
\&        \-p      Processor type
\&        \-v      Kernel version
\&        \-i      Hardware platform
\&        \-o      OS name
.Ve
.IP "\fBunexpand\fR" 4
.IX Item "unexpand"
unexpand [\-fa][\-t N] [\s-1FILE\s0]...
.Sp
Convert spaces to tabs, writing to stdout
.Sp
.Vb 3
\&        \-a      Convert all blanks
\&        \-f      Convert only leading blanks
\&        \-t N    Tabstops every N chars
.Ve
.IP "\fBuniq\fR" 4
.IX Item "uniq"
uniq [\-cduiz] [\-f,s,w N] [\s-1FILE\s0 [\s-1OUTFILE\s0]]
.Sp
Discard duplicate lines
.Sp
.Vb 8
\&        \-c      Prefix lines by the number of occurrences
\&        \-d      Only print duplicate lines
\&        \-u      Only print unique lines
\&        \-i      Ignore case
\&        \-z      NUL terminated output
\&        \-f N    Skip first N fields
\&        \-s N    Skip first N chars (after any skipped fields)
\&        \-w N    Compare N characters in line
.Ve
.IP "\fBunix2dos\fR" 4
.IX Item "unix2dos"
unix2dos [\-ud] [\s-1FILE\s0]
.Sp
Convert \s-1FILE\s0 in-place from Unix to \s-1DOS\s0 format.
When no file is given, use stdin/stdout.
.Sp
.Vb 2
\&        \-u      dos2unix
\&        \-d      unix2dos
.Ve
.IP "\fBunlink\fR" 4
.IX Item "unlink"
unlink \s-1FILE\s0
.Sp
Delete \s-1FILE\s0 by calling \fBunlink()\fR
.IP "\fBunlzma\fR" 4
.IX Item "unlzma"
unlzma [\-cfk] [\s-1FILE\s0]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 4
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP "\fBunshare\fR" 4
.IX Item "unshare"
unshare [\s-1OPTIONS\s0] [\s-1PROG ARGS\s0]
.Sp
.Vb 12
\&        \-m,\-\-mount[=FILE]       Unshare mount namespace
\&        \-u,\-\-uts[=FILE]         Unshare UTS namespace (hostname etc.)
\&        \-i,\-\-ipc[=FILE]         Unshare System V IPC namespace
\&        \-n,\-\-net[=FILE]         Unshare network namespace
\&        \-p,\-\-pid[=FILE]         Unshare PID namespace
\&        \-U,\-\-user[=FILE]        Unshare user namespace
\&        \-f                      Fork before execing PROG
\&        \-r                      Map current user to root (implies \-U)
\&        \-\-mount\-proc[=DIR]      Mount /proc filesystem first (implies \-m)
\&        \-\-propagation slave|shared|private|unchanged
\&                                Modify mount propagation in mount namespace
\&        \-\-setgroups allow|deny  Control the setgroups syscall in user namespaces
.Ve
.IP "\fBunxz\fR" 4
.IX Item "unxz"
unxz [\-cfk] [\s-1FILE\s0]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 4
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP "\fBunzip\fR" 4
.IX Item "unzip"
unzip [\-lnojpqK] FILE[.zip] [\s-1FILE\s0]... [\-x \s-1FILE\s0]... [\-d \s-1DIR\s0]
.Sp
Extract FILEs from \s-1ZIP\s0 archive
.Sp
.Vb 10
\&        \-l      List contents (with \-q for short form)
\&        \-n      Never overwrite files (default: ask)
\&        \-o      Overwrite
\&        \-j      Do not restore paths
\&        \-p      Write to stdout
\&        \-t      Test
\&        \-q      Quiet
\&        \-K      Do not clear SUID bit
\&        \-x FILE Exclude FILEs
\&        \-d DIR  Extract into DIR
.Ve
.IP "\fBusleep\fR" 4
.IX Item "usleep"
usleep N
.Sp
Pause for N microseconds
.IP "\fBuudecode\fR" 4
.IX Item "uudecode"
uudecode [\-o \s-1OUTFILE\s0] [\s-1INFILE\s0]
.Sp
Uudecode a file
Finds \s-1OUTFILE\s0 in uuencoded source unless \-o is given
.IP "\fBuuencode\fR" 4
.IX Item "uuencode"
uuencode [\-m] [\s-1FILE\s0] \s-1STORED_FILENAME\s0
.Sp
Uuencode \s-1FILE\s0 (or stdin) to stdout
.Sp
.Vb 1
\&        \-m      Use base64 encoding per RFC1521
.Ve
.IP "\fBvi\fR" 4
.IX Item "vi"
vi [\-c \s-1CMD\s0] [\-R] [\-H] [\s-1FILE\s0]...
.Sp
Edit \s-1FILE\s0
.Sp
.Vb 3
\&        \-c CMD  Initial command to run ($EXINIT and ~/.exrc also available)
\&        \-R      Read\-only
\&        \-H      List available features
.Ve
.IP "\fBvlock\fR" 4
.IX Item "vlock"
vlock [\-a]
.Sp
Lock a virtual terminal. A password is required to unlock.
.Sp
.Vb 1
\&        \-a      Lock all VTs
.Ve
.IP "\fBvolname\fR" 4
.IX Item "volname"
volname [\s-1DEVICE\s0]
.Sp
Show \s-1CD\s0 volume name of the \s-1DEVICE\s0 (default /dev/cdrom)
.IP "\fBwatch\fR" 4
.IX Item "watch"
watch [\-n \s-1SEC\s0] [\-t] \s-1PROG ARGS\s0
.Sp
Run \s-1PROG\s0 periodically
.Sp
.Vb 2
\&        \-n SEC  Period (default 2)
\&        \-t      Don\*(Aqt print header
.Ve
.IP "\fBwc\fR" 4
.IX Item "wc"
wc [\-cmlwL] [\s-1FILE\s0]...
.Sp
Count lines, words, and bytes for FILEs (or stdin)
.Sp
.Vb 5
\&        \-c      Count bytes
\&        \-m      Count characters
\&        \-l      Count newlines
\&        \-w      Count words
\&        \-L      Print longest line length
.Ve
.IP "\fBwget\fR" 4
.IX Item "wget"
wget [\-cqS] [\-\-spider] [\-O \s-1FILE\s0] [\-o \s-1LOGFILE\s0] [\-\-header \s-1STR\s0]
	[\-\-post\-data \s-1STR\s0 | \-\-post\-file \s-1FILE\s0] [\-Y on/off]
	[\-\-no\-check\-certificate] [\-P \s-1DIR\s0] [\-U \s-1AGENT\s0] [\-T \s-1SEC\s0] \s-1URL...\s0
.Sp
Retrieve files via \s-1HTTP\s0 or \s-1FTP\s0
.Sp
.Vb 10
\&        \-\-spider        Only check URL existence: $? is 0 if exists
\&        \-\-header STR    Add STR (of form \*(Aqheader: value\*(Aq) to headers
\&        \-\-post\-data STR Send STR using POST method
\&        \-\-post\-file FILE        Send FILE using POST method
\&        \-\-no\-check\-certificate  Don\*(Aqt validate the server\*(Aqs certificate
\&        \-c              Continue retrieval of aborted transfer
\&        \-q              Quiet
\&        \-P DIR          Save to DIR (default .)
\&        \-S              Show server response
\&        \-T SEC          Network read timeout is SEC seconds
\&        \-O FILE         Save to FILE (\*(Aq\-\*(Aq for stdout)
\&        \-o LOGFILE      Log messages to FILE
\&        \-U STR          Use STR for User\-Agent header
\&        \-Y on/off       Use proxy
.Ve
.IP "\fBwhich\fR" 4
.IX Item "which"
which [\-a] \s-1COMMAND...\s0
.Sp
Locate \s-1COMMAND\s0
.Sp
.Vb 1
\&        \-a      Show all matches
.Ve
.IP "\fBwhoami\fR" 4
.IX Item "whoami"
whoami
.Sp
Print the user name associated with the current effective user id
.IP "\fBwhois\fR" 4
.IX Item "whois"
whois [\-i] [\-h \s-1SERVER\s0] [\-p \s-1PORT\s0] \s-1NAME...\s0
.Sp
Query \s-1WHOIS\s0 info about \s-1NAME\s0
.Sp
.Vb 2
\&        \-i      Show redirect results too
\&        \-h,\-p   Server to query
.Ve
.IP "\fBxargs\fR" 4
.IX Item "xargs"
xargs [\s-1OPTIONS\s0] [\s-1PROG ARGS\s0]
.Sp
Run \s-1PROG\s0 on every item given by stdin
.Sp
.Vb 12
\&        \-0      NUL terminated input
\&        \-a FILE Read from FILE instead of stdin
\&        \-o      Reopen stdin as /dev/tty
\&        \-r      Don\*(Aqt run command if input is empty
\&        \-t      Print the command on stderr before execution
\&        \-p      Ask user whether to run each command
\&        \-E STR,\-e[STR]  STR stops input processing
\&        \-I STR  Replace STR within PROG ARGS with input line
\&        \-n N    Pass no more than N args to PROG
\&        \-s N    Pass command line of no more than N bytes
\&        \-P N    Run up to N PROGs in parallel
\&        \-x      Exit if size is exceeded
.Ve
.IP "\fBxxd\fR" 4
.IX Item "xxd"
xxd [\-pri] [\-g N] [\-c N] [\-l \s-1LEN\s0] [\-s \s-1OFS\s0] [\-o \s-1OFS\s0] [\s-1FILE\s0]
.Sp
Hex dump \s-1FILE\s0 (or stdin)
.Sp
.Vb 8
\&        \-g N            Bytes per group
\&        \-c N            Bytes per line
\&        \-p              Show only hex bytes, assumes \-c30
\&        \-i              C include file style
\&        \-l LENGTH       Show only first LENGTH bytes
\&        \-s OFFSET       Skip OFFSET bytes
\&        \-o OFFSET       Add OFFSET to displayed offset
\&        \-r              Reverse (with \-p, assumes no offsets in input)
.Ve
.IP "\fBxz\fR" 4
.IX Item "xz"
xz \-d [\-cfk] [\s-1FILE\s0]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 5
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP "\fBxzcat\fR" 4
.IX Item "xzcat"
xzcat [\s-1FILE\s0]...
.Sp
Decompress to stdout
.IP "\fByes\fR" 4
.IX Item "yes"
yes [\s-1STRING\s0]
.Sp
Repeatedly print a line with \s-1STRING,\s0 or 'y'
.IP "\fBzcat\fR" 4
.IX Item "zcat"
zcat [\s-1FILE\s0]...
.Sp
Decompress to stdout
.SH "LIBC NSS"
.IX Header "LIBC NSS"
\&\s-1GNU\s0 Libc (glibc) uses the Name Service Switch (\s-1NSS\s0) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of \s-1NSS.\s0  Some applets however, such as login and su, will use libc functions
that require \s-1NSS.\s0
.PP
If you enable \s-1CONFIG_USE_BB_PWD_GRP,\s0 BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using \s-1NSS.\s0  This may allow you to run your system without the need for
installing any of the \s-1NSS\s0 configuration files and libraries.
.PP
When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc \s-1NSS\s0 stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).
.PP
Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any \s-1NSS\s0 support files or libraries.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Denis Vlasenko <vda.linux@googlemail.com>
.SH "AUTHORS"
.IX Header "AUTHORS"
The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.
.PP
Emanuele Aina <emanuele.aina@tiscali.it>
.PP
.Vb 1
\&    run\-parts
.Ve
.PP
Erik Andersen <andersen@codepoet.org>
.PP
.Vb 4
\&    Tons of new stuff, major rewrite of most of the
\&    core apps, tons of new apps as noted in header files.
\&    Lots of tedious effort writing these boring docs that
\&    nobody is going to actually read.
.Ve
.PP
Laurence Anderson <l.d.anderson@warwick.ac.uk>
.PP
.Vb 1
\&    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm
.Ve
.PP
Jeff Angielski <jeff@theptrgroup.com>
.PP
.Vb 1
\&    ftpput, ftpget
.Ve
.PP
Edward Betts <edward@debian.org>
.PP
.Vb 1
\&    expr, hostid, logname, whoami
.Ve
.PP
John Beppu <beppu@codepoet.org>
.PP
.Vb 1
\&    du, nslookup, sort
.Ve
.PP
Brian Candler <B.Candler@pobox.com>
.PP
.Vb 1
\&    tiny\-ls(ls)
.Ve
.PP
Randolph Chung <tausq@debian.org>
.PP
.Vb 1
\&    fbset, ping, hostname
.Ve
.PP
Dave Cinege <dcinege@psychosis.com>
.PP
.Vb 2
\&    more(v2), makedevs, dutmp, modularization, auto links file,
\&    various fixes, Linux Router Project maintenance
.Ve
.PP
Jordan Crouse <jordan@cosmicpenguin.net>
.PP
.Vb 1
\&    ipcalc
.Ve
.PP
Magnus Damm <damm@opensource.se>
.PP
.Vb 1
\&    tftp client insmod powerpc support
.Ve
.PP
Larry Doolittle <ldoolitt@recycle.lbl.gov>
.PP
.Vb 1
\&    pristine source directory compilation, lots of patches and fixes.
.Ve
.PP
Glenn Engel <glenne@engel.org>
.PP
.Vb 1
\&    httpd
.Ve
.PP
Gennady Feldman <gfeldman@gena01.com>
.PP
.Vb 2
\&    Sysklogd (single threaded syslogd, IPC Circular buffer support,
\&    logread), various fixes.
.Ve
.PP
Karl M. Hegbloom <karlheg@debian.org>
.PP
.Vb 1
\&    cp_mv.c, the test suite, various fixes to utility.c, &c.
.Ve
.PP
Daniel Jacobowitz <dan@debian.org>
.PP
.Vb 1
\&    mktemp.c
.Ve
.PP
Matt Kraai <kraai@alumni.cmu.edu>
.PP
.Vb 1
\&    documentation, bugfixes, test suite
.Ve
.PP
Stephan Linz <linz@li\-pro.net>
.PP
.Vb 1
\&    ipcalc, Red Hat equivalence
.Ve
.PP
John Lombardo <john@deltanet.com>
.PP
.Vb 1
\&    tr
.Ve
.PP
Glenn McGrath <bug1@iinet.net.au>
.PP
.Vb 3
\&    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
\&    nameif, sed, patch, fold, install, uudecode.
\&    Various bugfixes, review and apply numerous patches.
.Ve
.PP
Manuel Novoa \s-1III\s0 <mjn3@codepoet.org>
.PP
.Vb 3
\&    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
\&    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
\&    get_last_path_component, simplify_path, and a number trivial libbb routines
\&
\&    also bug fixes, partial rewrites, and size optimizations in
\&    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
\&    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
\&    interface, dutmp, ifconfig, route
.Ve
.PP
Vladimir Oleynik <dzo@simtreas.ru>
.PP
.Vb 4
\&    cmdedit; xargs(current), httpd(current);
\&    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
\&    locale, various fixes
\&    and irreconcilable critic of everything not perfect.
.Ve
.PP
Bruce Perens <bruce@pixar.com>
.PP
.Vb 2
\&    Original author of BusyBox in 1995, 1996. Some of his code can
\&    still be found hiding here and there...
.Ve
.PP
Tim Riker <Tim@Rikers.org>
.PP
.Vb 1
\&    bug fixes, member of fan club
.Ve
.PP
Kent Robotti <robotti@metconnect.com>
.PP
.Vb 1
\&    reset, tons and tons of bug reports and patches.
.Ve
.PP
Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>
.PP
.Vb 1
\&    wget \- Contributed by permission of Covad Communications
.Ve
.PP
Pavel Roskin <proski@gnu.org>
.PP
.Vb 1
\&    Lots of bugs fixes and patches.
.Ve
.PP
Gyepi Sam <gyepi@praxis\-sw.com>
.PP
.Vb 1
\&    Remote logging feature for syslogd
.Ve
.PP
Linus Torvalds <torvalds@transmeta.com>
.PP
.Vb 1
\&    mkswap, fsck.minix, mkfs.minix
.Ve
.PP
Mark Whitley <markw@codepoet.org>
.PP
.Vb 2
\&    grep, sed, cut, xargs(previous),
\&    style\-guide, new\-applet\-HOWTO, bug fixes, etc.
.Ve
.PP
Charles P. Wright <cpwright@villagenet.com>
.PP
.Vb 1
\&    gzip, mini\-netcat(nc)
.Ve
.PP
Enrique Zanardi <ezanardi@ull.es>
.PP
.Vb 1
\&    tarcat (since removed), loadkmap, various fixes, Debian maintenance
.Ve
.PP
Tito Ragusa <farmatito@tiscali.it>
.PP
.Vb 1
\&    devfsd and size optimizations in strings, openvt and deallocvt.
.Ve
.PP
Paul Fox <pgf@foxharp.boston.ma.us>
.PP
.Vb 1
\&    vi editing mode for ash, various other patches/fixes
.Ve
.PP
Roberto A. Foglietta <me@roberto.foglietta.name>
.PP
.Vb 1
\&    port: dnsd
.Ve
.PP
Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>
.PP
.Vb 1
\&    misc
.Ve
.PP
Mike Frysinger <vapier@gentoo.org>
.PP
.Vb 1
\&    initial e2fsprogs, printenv, setarch, sum, misc
.Ve
.PP
Jie Zhang <jie.zhang@analog.com>
.PP
.Vb 1
\&    fixed two bugs in msh and hush (exitcode of killed processes)
.Ve
